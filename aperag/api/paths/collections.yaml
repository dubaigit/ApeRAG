collections:
  get:
    summary: List collections
    description: Get a list of collections (owned and optionally subscribed)
    security:
      - BearerAuth: []
    parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
      - name: page_size
        in: query
        schema:
          type: integer
          default: 10
      - name: include_subscribed
        in: query
        schema:
          type: boolean
          default: true
        description: Whether to include subscribed collections in results
    responses:
      '200':
        description: List of collections
        content:
          application/json:
            schema:
              $ref: '../components/schemas/collection.yaml#/collectionViewList'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

  post:
    summary: Create a new collection
    description: Create a new collection
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/collection.yaml#/collectionCreate'
    responses:
      '201':
        description: Collection created successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/collection.yaml#/collection'

collection:
  get:
    summary: Get collection details
    description: Get details of a specific collection
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: Collection details
        content:
          application/json:
            schema:
              $ref: '../components/schemas/collection.yaml#/collection'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

  delete:
    summary: Delete a collection
    description: Delete a collection
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '204':
        description: Collection deleted successfully

  put:
    summary: Update a collection
    description: Update a collection
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/collection.yaml#/collectionUpdate'
    responses:
      '200':
        description: Collection updated successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/collection.yaml#/collection'

summary_generate:
  post:
    summary: Generate collection summary
    description: Trigger collection summary generation as background task
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: Collection summary generation started
        content:
          application/json:
            schema:
              type: object
              properties:
                collection_id:
                  type: string
                success:
                  type: boolean
                message:
                  type: string
                status:
                  type: string
      '404':
        description: Collection not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

documents:
  get:
    summary: List documents
    description: Get a list of documents
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: integer
          default: 1
      - name: page_size
        in: query
        schema:
          type: integer
          default: 10
    responses:
      '200':
        description: List of documents
        content:
          application/json:
            schema:
              $ref: '../components/schemas/document.yaml#/documentList'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

  post:
    summary: Create a new document
    description: Create a new document
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/document.yaml#/documentCreate'
    responses:
      '200':
        description: Document created successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/document.yaml#/documentList'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

document:
  get:
    summary: Get document details
    description: Get details of a specific document
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: Document details
        content:
          application/json:
            schema:
              $ref: '../components/schemas/document.yaml#/document'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Document not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
  delete:
    summary: Delete a document
    description: Delete a document
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '204':
        description: Document deleted successfully
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Document not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

document_preview:
  get:
    summary: Get document preview
    description: Get a preview of a specific document
    operationId: get_document_preview
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: Document preview
        content:
          application/json:
            schema:
              $ref: '../components/schemas/document.yaml#/documentPreview'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Document not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

document_object:
  get:
    summary: Get document object
    description: Get an object from a specific document
    operationId: get_document_object
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
      - name: path
        in: query
        required: true
        schema:
          type: string
    responses:
      '200':
        description: Document object
        content:
          application/octet-stream: {}
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Document not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

rebuild_indexes:
  post:
    summary: Rebuild document indexes
    description: Rebuild specified types of indexes for a document
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
      - name: document_id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/document.yaml#/rebuildIndexesRequest'
    responses:
      '204':
        description: Index rebuild initiated successfully
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Document not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

searches:
  get:
    summary: Get search history
    description: Get the history of searches
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: Search history
        content:
          application/json:
            schema:
              $ref: '../components/schemas/collection.yaml#/searchResultList'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

  post:
    summary: Search in collection
    description: Search in a collection with different search types
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/collection.yaml#/searchRequest'
    responses:
      '200':
        description: Search results
        content:
          application/json:
            schema:
              $ref: '../components/schemas/collection.yaml#/searchResult'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

search_detail:
  delete:
    summary: Delete a search
    description: Delete a search
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
      - name: search_id
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: Search deleted successfully
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

graph_labels:
  get:
    summary: Get knowledge graph labels
    description: Get all available node labels in the collection's knowledge graph
    tags:
      - graph
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
    responses:
      '200':
        description: Available graph labels retrieved successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/graph.yaml#/graphLabelsResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

graph:
  get:
    summary: Get knowledge graph
    description: |
      Retrieve knowledge graph data. Two modes are supported:
      1. Overview mode (default): Uses the entire graph ("*") and intelligently selects the most important nodes
      2. Subgraph mode: When 'label' is provided, returns a subgraph centered on that node

      Node selection prioritization:
      1. For overview: nodes with highest degree (most connections), automatically removing isolated nodes
      2. For subgraph: nodes within specified hops from the starting node

      The overview mode is optimized for visualization performance by prioritizing well-connected nodes.
    tags:
      - graph
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
      - name: label
        in: query
        required: false
        schema:
          type: string
          default: "*"
        description: |
          Label of the starting node for subgraph exploration.
          Use "*" (default) for overview mode showing the most important nodes in the entire graph.
          Provide a specific entity name for subgraph mode.
        example: "墨香居"
      - name: max_nodes
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 10000
          default: 1000
        description: Maximum number of nodes to return
        example: 1000
      - name: max_depth
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 10
          default: 3
        description: |
          Maximum depth when in subgraph mode (when specific label is provided).
          Ignored in overview mode (when label is "*").
        example: 3

    responses:
      '200':
        description: Knowledge graph retrieved successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/graph.yaml#/knowledgeGraph'
      '400':
        description: Bad request - invalid parameters
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found or label not found in graph
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

graph_nodes_merge:
  post:
    summary: Merge graph nodes
    description: |
      Merge multiple graph nodes into one, combining their descriptions, relationships, and vector data.

      Provide `entity_ids` array with 1+ entities and optional `target_entity_data` for customization.

      The operation:
      1. Auto-selects target entity (highest degree) if not specified in `target_entity_data`
      2. Combines descriptions using default merge strategy (concatenate)
      3. Merges metadata using default behavior: entity_type from target, others concatenated/joined
      4. Updates all relationships to point to the target node
      5. Updates vector storage data
      6. Removes the source nodes

      Entity type handling: Uses target entity's type if it exists, otherwise uses merged result.
      The operation is idempotent - if source nodes don't exist, it returns success.
    tags:
      - graph
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/graph.yaml#/nodeMergeRequest'
    responses:
      '200':
        description: Node merge completed successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/graph.yaml#/nodeMergeResponse'
      '400':
        description: Bad request - invalid parameters or entity IDs are the same
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

graph_merge_suggestions:
  post:
    summary: Generate node merge suggestions
    description: |
      Analyze knowledge graph to identify potentially mergeable nodes using LLM for semantic similarity.
      Returns confidence-ranked merge suggestions for user review and decision.

      This is a stateless endpoint that analyzes the current graph and returns suggestions
      without persisting any state. Users can then use the suggestions with the existing
      merge_nodes endpoint to perform actual merges.

      The algorithm prioritizes high-degree nodes and uses LLM to judge semantic similarity
      based on entity names, types, and descriptions.
    tags:
      - graph
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
    requestBody:
      required: false
      content:
        application/json:
          schema:
            $ref: '../components/schemas/graph.yaml#/mergeSuggestionsRequest'
          examples:
            default:
              summary: Default request
              description: Generate up to 10 suggestions for all entity types
              value:
                max_suggestions: 10
            specific_types:
              summary: Specific entity types
              description: Only analyze PERSON and ORGANIZATION entities
              value:
                max_suggestions: 20
                entity_types: ["PERSON", "ORGANIZATION"]
            minimal:
              summary: Minimal request
              description: Empty request body uses default values
              value: {}
    responses:
      '200':
        description: Merge suggestions generated successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/graph.yaml#/mergeSuggestionsResponse'
            examples:
              with_suggestions:
                summary: Response with suggestions
                description: Successful analysis with merge suggestions
                value:
                  suggestions:
                    - entities:
                        - entity_id: "墨香居"
                          entity_name: "墨香居"
                          entity_type: "ORGANIZATION"
                          description: "这条老巷子里唯一的旧书店"
                          degree: 8
                        - entity_id: "旧书店"
                          entity_name: "旧书店"
                          entity_type: "ORGANIZATION"
                          description: "经营各种书籍的小店"
                          degree: 5
                      confidence_score: 0.85
                      merge_reason: "两个实体都描述同一个书店，'墨香居'是具体名称，'旧书店'是通用描述，应该合并为同一实体"
                      suggested_target_entity:
                        entity_name: "墨香居"
                        entity_type: "ORGANIZATION"
                        description: "墨香居是这条老巷子里唯一的旧书店，经营各种书籍"
                  total_analyzed_nodes: 156
                  processing_time_seconds: 12.5
              no_suggestions:
                summary: No suggestions found
                description: Analysis completed but no merge candidates found
                value:
                  suggestions: []
                  total_analyzed_nodes: 45
                  processing_time_seconds: 3.2
      '400':
        description: Bad request - invalid parameters
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found or knowledge graph not enabled
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

graph_suggestion_action:
  post:
    summary: Accept or reject a merge suggestion
    description: |
      Take action on a specific merge suggestion.

      Actions:
      - accept: Accept the suggestion and perform the merge operation
      - reject: Reject the suggestion and mark it as rejected

      When accepting, the system will:
      1. Update suggestion status to ACCEPTED
      2. Perform the actual node merge using suggested entity IDs
      3. Mark related suggestions involving the same entities as EXPIRED

      When rejecting, the system will:
      1. Update suggestion status to REJECTED
      2. No merge operation is performed

      The target entity data can be optionally overridden when accepting a suggestion.
    tags:
      - graph
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
      - name: suggestion_id
        in: path
        required: true
        schema:
          type: string
        description: Suggestion ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/graph.yaml#/suggestionActionRequest'
          examples:
            accept:
              summary: Accept suggestion
              description: Accept the suggestion and perform merge
              value:
                action: "accept"
            reject:
              summary: Reject suggestion
              description: Reject the suggestion without merging
              value:
                action: "reject"
            accept_with_override:
              summary: Accept with custom target data
              description: Accept suggestion but override target entity data
              value:
                action: "accept"
                target_entity_data:
                  entity_name: "Custom Name"
                  description: "Custom description for merged entity"
    responses:
      '200':
        description: Action completed successfully
        content:
          application/json:
            schema:
              $ref: '../components/schemas/graph.yaml#/suggestionActionResponse'
            examples:
              accept_success:
                summary: Accept action successful
                description: Suggestion accepted and merge completed
                value:
                  status: "success"
                  message: "Suggestion msug123 has been accepted and merge completed"
                  suggestion_id: "msug123"
                  action: "accept"
                  merge_result:
                    status: "success"
                    message: "Successfully merged 2 entities into 墨香居"
                    entity_ids: ["墨香居", "书店"]
                    target_entity_data:
                      entity_name: "墨香居"
                      entity_type: "ORGANIZATION"
                      description: "墨香居是这条老巷子里唯一的旧书店，经营着各种书籍"
                    source_entities: ["书店"]
                    redirected_edges: 5
                    merged_description_length: 45
              reject_success:
                summary: Reject action successful
                description: Suggestion rejected successfully
                value:
                  status: "success"
                  message: "Suggestion msug123 has been rejected"
                  suggestion_id: "msug123"
                  action: "reject"
                  merge_result: null
      '400':
        description: Bad request - invalid action or suggestion already processed
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection or suggestion not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

sharing:
  get:
    summary: Get collection sharing status
    description: Get the sharing status of a collection (owner only)
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
    responses:
      '200':
        description: Collection sharing status
        content:
          application/json:
            schema:
              $ref: '../components/schemas/marketplace.yaml#/SharingStatusResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '403':
        description: Permission denied (not collection owner)
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

  post:
    summary: Publish collection to marketplace
    description: Publish a collection to the public marketplace (owner only)
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
    responses:
      '204':
        description: Collection published successfully
      '400':
        description: Bad request (e.g., collection already published)
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '403':
        description: Permission denied (not collection owner)
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'

  delete:
    summary: Unpublish collection from marketplace
    description: Remove a collection from the public marketplace (owner only)
    security:
      - BearerAuth: []
    parameters:
      - name: collection_id
        in: path
        required: true
        schema:
          type: string
        description: Collection ID
    responses:
      '204':
        description: Collection unpublished successfully
      '400':
        description: Bad request (e.g., collection not published)
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '403':
        description: Permission denied (not collection owner)
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '404':
        description: Collection not found
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '../components/schemas/common.yaml#/failResponse'
