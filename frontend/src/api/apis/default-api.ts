/* tslint:disable */
/* eslint-disable */
/**
 * ApeRAG API
 * ApeRAG API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AgentMessage } from '../models';
// @ts-ignore
import type { AgentMessagePost200Response } from '../models';
// @ts-ignore
import type { ApiKey } from '../models';
// @ts-ignore
import type { ApiKeyCreate } from '../models';
// @ts-ignore
import type { ApiKeyList } from '../models';
// @ts-ignore
import type { ApiKeyUpdate } from '../models';
// @ts-ignore
import type { Bot } from '../models';
// @ts-ignore
import type { BotCreate } from '../models';
// @ts-ignore
import type { BotList } from '../models';
// @ts-ignore
import type { BotUpdate } from '../models';
// @ts-ignore
import type { ChangePassword } from '../models';
// @ts-ignore
import type { Chat } from '../models';
// @ts-ignore
import type { ChatCreate } from '../models';
// @ts-ignore
import type { ChatDetails } from '../models';
// @ts-ignore
import type { ChatList } from '../models';
// @ts-ignore
import type { ChatUpdate } from '../models';
// @ts-ignore
import type { Collection } from '../models';
// @ts-ignore
import type { CollectionCreate } from '../models';
// @ts-ignore
import type { CollectionUpdate } from '../models';
// @ts-ignore
import type { CollectionViewList } from '../models';
// @ts-ignore
import type { CollectionsCollectionIdSummaryGeneratePost200Response } from '../models';
// @ts-ignore
import type { Config } from '../models';
// @ts-ignore
import type { DebugFlowRequest } from '../models';
// @ts-ignore
import type { Document } from '../models';
// @ts-ignore
import type { DocumentCreate } from '../models';
// @ts-ignore
import type { DocumentList } from '../models';
// @ts-ignore
import type { DocumentPreview } from '../models';
// @ts-ignore
import type { FailResponse } from '../models';
// @ts-ignore
import type { Feedback } from '../models';
// @ts-ignore
import type { Invitation } from '../models';
// @ts-ignore
import type { InvitationCreate } from '../models';
// @ts-ignore
import type { InvitationList } from '../models';
// @ts-ignore
import type { LlmConfigurationResponse } from '../models';
// @ts-ignore
import type { LlmProvider } from '../models';
// @ts-ignore
import type { LlmProviderCreateWithApiKey } from '../models';
// @ts-ignore
import type { LlmProviderModel } from '../models';
// @ts-ignore
import type { LlmProviderModelCreate } from '../models';
// @ts-ignore
import type { LlmProviderModelList } from '../models';
// @ts-ignore
import type { LlmProviderModelUpdate } from '../models';
// @ts-ignore
import type { LlmProviderUpdateWithApiKey } from '../models';
// @ts-ignore
import type { Login } from '../models';
// @ts-ignore
import type { MarketplaceCollectionsCollectionIdGraphGet200Response } from '../models';
// @ts-ignore
import type { MarketplaceCollectionsCollectionIdSubscribeDelete200Response } from '../models';
// @ts-ignore
import type { ModelConfigList } from '../models';
// @ts-ignore
import type { PromptTemplateList } from '../models';
// @ts-ignore
import type { RebuildIndexesRequest } from '../models';
// @ts-ignore
import type { Register } from '../models';
// @ts-ignore
import type { SearchRequest } from '../models';
// @ts-ignore
import type { SearchResult } from '../models';
// @ts-ignore
import type { SearchResultList } from '../models';
// @ts-ignore
import type { Settings } from '../models';
// @ts-ignore
import type { SettingsTestMineruTokenPost200Response } from '../models';
// @ts-ignore
import type { SettingsTestMineruTokenPostRequest } from '../models';
// @ts-ignore
import type { SharedCollection } from '../models';
// @ts-ignore
import type { SharedCollectionList } from '../models';
// @ts-ignore
import type { SharingStatusResponse } from '../models';
// @ts-ignore
import type { TagFilterRequest } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { UserList } from '../models';
// @ts-ignore
import type { WorkflowDefinition } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is for documentation and model generation only. Actual communication should use WebSocket or SSE. 
         * @summary (Doc Only) Agent message format for WebSocket/SSE
         * @param {AgentMessage} agentMessage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentMessagePost: async (agentMessage: AgentMessage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentMessage' is not null or undefined
            assertParamExists('agentMessagePost', 'agentMessage', agentMessage)
            const localVarPath = `/agent/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agentMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete API key
         * @summary Delete API key
         * @param {string} apikeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdDelete: async (apikeyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikeyId' is not null or undefined
            assertParamExists('apikeysApikeyIdDelete', 'apikeyId', apikeyId)
            const localVarPath = `/apikeys/{apikey_id}`
                .replace(`{${"apikey_id"}}`, encodeURIComponent(String(apikeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update API key
         * @summary Update API key
         * @param {string} apikeyId 
         * @param {ApiKeyUpdate} apiKeyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdPut: async (apikeyId: string, apiKeyUpdate: ApiKeyUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apikeyId' is not null or undefined
            assertParamExists('apikeysApikeyIdPut', 'apikeyId', apikeyId)
            // verify required parameter 'apiKeyUpdate' is not null or undefined
            assertParamExists('apikeysApikeyIdPut', 'apiKeyUpdate', apiKeyUpdate)
            const localVarPath = `/apikeys/{apikey_id}`
                .replace(`{${"apikey_id"}}`, encodeURIComponent(String(apikeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiKeyUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get API keys
         * @summary Get API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create API key
         * @summary Create API key
         * @param {ApiKeyCreate} apiKeyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysPost: async (apiKeyCreate: ApiKeyCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyCreate' is not null or undefined
            assertParamExists('apikeysPost', 'apiKeyCreate', apiKeyCreate)
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiKeyCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
         * @summary Get available models with filtering
         * @param {TagFilterRequest} [tagFilterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableModelsPost: async (tagFilterRequest?: TagFilterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/available_models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagFilterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a chat (idempotent operation)
         * @summary Delete a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdDelete: async (botId: string, chatId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdDelete', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdDelete', 'chatId', chatId)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific chat
         * @summary Get chat details
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdGet: async (botId: string, chatId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdGet', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdGet', 'chatId', chatId)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Feedback a message
         * @summary Feedback a message
         * @param {string} botId 
         * @param {string} chatId 
         * @param {string} messageId 
         * @param {Feedback} feedback 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdMessagesMessageIdPost: async (botId: string, chatId: string, messageId: string, feedback: Feedback, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'messageId', messageId)
            // verify required parameter 'feedback' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdMessagesMessageIdPost', 'feedback', feedback)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}/messages/{message_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedback, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a chat
         * @summary Update a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {ChatUpdate} chatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdPut: async (botId: string, chatId: string, chatUpdate: ChatUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdPut', 'botId', botId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdPut', 'chatId', chatId)
            // verify required parameter 'chatUpdate' is not null or undefined
            assertParamExists('botsBotIdChatsChatIdPut', 'chatUpdate', chatUpdate)
            const localVarPath = `/bots/{bot_id}/chats/{chat_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of chats
         * @summary List chats
         * @param {string} botId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsGet: async (botId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsGet', 'botId', botId)
            const localVarPath = `/bots/{bot_id}/chats`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new chat
         * @summary Create a new chat
         * @param {string} botId 
         * @param {ChatCreate} chatCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsPost: async (botId: string, chatCreate: ChatCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdChatsPost', 'botId', botId)
            // verify required parameter 'chatCreate' is not null or undefined
            assertParamExists('botsBotIdChatsPost', 'chatCreate', chatCreate)
            const localVarPath = `/bots/{bot_id}/chats`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a bot (idempotent operation)
         * @summary Delete a bot
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdDelete: async (botId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdDelete', 'botId', botId)
            const localVarPath = `/bots/{bot_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {string} botId 
         * @param {DebugFlowRequest} debugFlowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowDebugPost: async (botId: string, debugFlowRequest: DebugFlowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdFlowDebugPost', 'botId', botId)
            // verify required parameter 'debugFlowRequest' is not null or undefined
            assertParamExists('botsBotIdFlowDebugPost', 'debugFlowRequest', debugFlowRequest)
            const localVarPath = `/bots/{bot_id}/flow/debug`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(debugFlowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get flow
         * @summary Get flow
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowGet: async (botId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdFlowGet', 'botId', botId)
            const localVarPath = `/bots/{bot_id}/flow`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update flow
         * @summary Update flow
         * @param {string} botId 
         * @param {WorkflowDefinition} workflowDefinition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowPut: async (botId: string, workflowDefinition: WorkflowDefinition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdFlowPut', 'botId', botId)
            // verify required parameter 'workflowDefinition' is not null or undefined
            assertParamExists('botsBotIdFlowPut', 'workflowDefinition', workflowDefinition)
            const localVarPath = `/bots/{bot_id}/flow`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowDefinition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific bot
         * @summary Get bot details
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdGet: async (botId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdGet', 'botId', botId)
            const localVarPath = `/bots/{bot_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a bot
         * @summary Update a bot
         * @param {string} botId 
         * @param {BotUpdate} botUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdPut: async (botId: string, botUpdate: BotUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botsBotIdPut', 'botId', botId)
            // verify required parameter 'botUpdate' is not null or undefined
            assertParamExists('botsBotIdPut', 'botUpdate', botUpdate)
            const localVarPath = `/bots/{bot_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of bots
         * @summary List bots
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new bot
         * @summary Create a new bot
         * @param {BotCreate} botCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsPost: async (botCreate: BotCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botCreate' is not null or undefined
            assertParamExists('botsPost', 'botCreate', botCreate)
            const localVarPath = `/bots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change user password
         * @summary Change user password
         * @param {ChangePassword} changePassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordPost: async (changePassword: ChangePassword, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePassword' is not null or undefined
            assertParamExists('changePasswordPost', 'changePassword', changePassword)
            const localVarPath = `/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePassword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDelete: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDelete', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a document
         * @summary Delete a document
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdDelete: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdDelete', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdDelete', 'documentId', documentId)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdGet: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdGet', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rebuild specified types of indexes for a document
         * @summary Rebuild document indexes
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {RebuildIndexesRequest} rebuildIndexesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost: async (collectionId: string, documentId: string, rebuildIndexesRequest: RebuildIndexesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost', 'documentId', documentId)
            // verify required parameter 'rebuildIndexesRequest' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost', 'rebuildIndexesRequest', rebuildIndexesRequest)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}/rebuild_indexes`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rebuildIndexesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {string} collectionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsGet: async (collectionId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/documents`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {string} collectionId 
         * @param {DocumentCreate} documentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsPost: async (collectionId: string, documentCreate: DocumentCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsPost', 'collectionId', collectionId)
            // verify required parameter 'documentCreate' is not null or undefined
            assertParamExists('collectionsCollectionIdDocumentsPost', 'documentCreate', documentCreate)
            const localVarPath = `/collections/{collection_id}/documents`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific collection
         * @summary Get collection details
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a collection
         * @summary Update a collection
         * @param {string} collectionId 
         * @param {CollectionUpdate} collectionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdPut: async (collectionId: string, collectionUpdate: CollectionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdPut', 'collectionId', collectionId)
            // verify required parameter 'collectionUpdate' is not null or undefined
            assertParamExists('collectionsCollectionIdPut', 'collectionUpdate', collectionUpdate)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the history of searches
         * @summary Get search history
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/searches`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search in a collection with different search types
         * @summary Search in collection
         * @param {string} collectionId 
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesPost: async (collectionId: string, searchRequest: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesPost', 'collectionId', collectionId)
            // verify required parameter 'searchRequest' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesPost', 'searchRequest', searchRequest)
            const localVarPath = `/collections/{collection_id}/searches`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a search
         * @summary Delete a search
         * @param {string} collectionId 
         * @param {string} searchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesSearchIdDelete: async (collectionId: string, searchId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesSearchIdDelete', 'collectionId', collectionId)
            // verify required parameter 'searchId' is not null or undefined
            assertParamExists('collectionsCollectionIdSearchesSearchIdDelete', 'searchId', searchId)
            const localVarPath = `/collections/{collection_id}/searches/{search_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"search_id"}}`, encodeURIComponent(String(searchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a collection from the public marketplace (owner only)
         * @summary Unpublish collection from marketplace
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSharingDelete: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSharingDelete', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/sharing`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the sharing status of a collection (owner only)
         * @summary Get collection sharing status
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSharingGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSharingGet', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/sharing`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a collection to the public marketplace (owner only)
         * @summary Publish collection to marketplace
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSharingPost: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSharingPost', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/sharing`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger collection summary generation as background task
         * @summary Generate collection summary
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSummaryGeneratePost: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionsCollectionIdSummaryGeneratePost', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}/summary/generate`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of collections (owned and optionally subscribed)
         * @summary List collections
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeSubscribed] Whether to include subscribed collections in results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsGet: async (page?: number, pageSize?: number, includeSubscribed?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (includeSubscribed !== undefined) {
                localVarQueryParameter['include_subscribed'] = includeSubscribed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new collection
         * @summary Create a new collection
         * @param {CollectionCreate} collectionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsPost: async (collectionCreate: CollectionCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionCreate' is not null or undefined
            assertParamExists('collectionsPost', 'collectionCreate', collectionCreate)
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system configuration
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an object from a specific document
         * @summary Get document object
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentObject: async (collectionId: string, documentId: string, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getDocumentObject', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getDocumentObject', 'documentId', documentId)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('getDocumentObject', 'path', path)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}/object`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a preview of a specific document
         * @summary Get document preview
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentPreview: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getDocumentPreview', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getDocumentPreview', 'documentId', documentId)
            const localVarPath = `/collections/{collection_id}/documents/{document_id}/preview`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all invitations
         * @summary Get all invitations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new invitation for a user to register
         * @summary Create an invitation
         * @param {InvitationCreate} invitationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitePost: async (invitationCreate: InvitationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invitationCreate' is not null or undefined
            assertParamExists('invitePost', 'invitationCreate', invitationCreate)
            const localVarPath = `/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invitationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get complete LLM configuration including providers and models
         * @summary Get complete LLM configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmConfigurationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/llm_configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all LLM provider models, optionally filtered by provider
         * @summary List all LLM provider models
         * @param {string} [providerName] Optional filter by provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProviderModelsGet: async (providerName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/llm_provider_models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (providerName !== undefined) {
                localVarQueryParameter['provider_name'] = providerName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new LLM provider with optional API key
         * @summary Create a new LLM provider
         * @param {LlmProviderCreateWithApiKey} llmProviderCreateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersPost: async (llmProviderCreateWithApiKey: LlmProviderCreateWithApiKey, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'llmProviderCreateWithApiKey' is not null or undefined
            assertParamExists('llmProvidersPost', 'llmProviderCreateWithApiKey', llmProviderCreateWithApiKey)
            const localVarPath = `/llm_providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderCreateWithApiKey, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an LLM provider (soft delete)
         * @summary Delete an LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameDelete: async (providerName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameDelete', 'providerName', providerName)
            const localVarPath = `/llm_providers/{provider_name}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific LLM provider by name
         * @summary Get a specific LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameGet: async (providerName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameGet', 'providerName', providerName)
            const localVarPath = `/llm_providers/{provider_name}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific model of a provider
         * @summary Delete a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelDeleteApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelDelete: async (providerName: string, api: LlmProvidersProviderNameModelsApiModelDeleteApiEnum, model: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelDelete', 'providerName', providerName)
            // verify required parameter 'api' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelDelete', 'api', api)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelDelete', 'model', model)
            const localVarPath = `/llm_providers/{provider_name}/models/{api}/{model}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)))
                .replace(`{${"api"}}`, encodeURIComponent(String(api)))
                .replace(`{${"model"}}`, encodeURIComponent(String(model)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific model of a provider
         * @summary Update a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelPutApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {LlmProviderModelUpdate} llmProviderModelUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelPut: async (providerName: string, api: LlmProvidersProviderNameModelsApiModelPutApiEnum, model: string, llmProviderModelUpdate: LlmProviderModelUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'providerName', providerName)
            // verify required parameter 'api' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'api', api)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'model', model)
            // verify required parameter 'llmProviderModelUpdate' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsApiModelPut', 'llmProviderModelUpdate', llmProviderModelUpdate)
            const localVarPath = `/llm_providers/{provider_name}/models/{api}/{model}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)))
                .replace(`{${"api"}}`, encodeURIComponent(String(api)))
                .replace(`{${"model"}}`, encodeURIComponent(String(model)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderModelUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all models for a specific provider
         * @summary Get models for a specific provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsGet: async (providerName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsGet', 'providerName', providerName)
            const localVarPath = `/llm_providers/{provider_name}/models`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new model for a specific provider
         * @summary Create a new model for a provider
         * @param {string} providerName Provider name
         * @param {LlmProviderModelCreate} llmProviderModelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsPost: async (providerName: string, llmProviderModelCreate: LlmProviderModelCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsPost', 'providerName', providerName)
            // verify required parameter 'llmProviderModelCreate' is not null or undefined
            assertParamExists('llmProvidersProviderNameModelsPost', 'llmProviderModelCreate', llmProviderModelCreate)
            const localVarPath = `/llm_providers/{provider_name}/models`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderModelCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing LLM provider with optional API key
         * @summary Update an LLM provider
         * @param {string} providerName Provider name
         * @param {LlmProviderUpdateWithApiKey} llmProviderUpdateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNamePut: async (providerName: string, llmProviderUpdateWithApiKey: LlmProviderUpdateWithApiKey, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('llmProvidersProviderNamePut', 'providerName', providerName)
            // verify required parameter 'llmProviderUpdateWithApiKey' is not null or undefined
            assertParamExists('llmProvidersProviderNamePut', 'llmProviderUpdateWithApiKey', llmProviderUpdateWithApiKey)
            const localVarPath = `/llm_providers/{provider_name}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(llmProviderUpdateWithApiKey, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login a user with username and password
         * @summary Login a user
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (login: Login, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('loginPost', 'login', login)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout a user
         * @summary Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get document preview for a subscribed Collection (read-only mode)
         * @summary Preview document in MarketplaceCollection (read-only)
         * @param {string} collectionId Collection ID
         * @param {string} documentId Document ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet: async (collectionId: string, documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet', 'documentId', documentId)
            const localVarPath = `/marketplace/collections/{collection_id}/documents/{document_id}/preview`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get document list for a subscribed Collection (read-only mode)
         * @summary List documents in MarketplaceCollection (read-only)
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdDocumentsGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('marketplaceCollectionsCollectionIdDocumentsGet', 'collectionId', collectionId)
            const localVarPath = `/marketplace/collections/{collection_id}/documents`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a subscribed Collection (read-only access)
         * @summary Get MarketplaceCollection details (read-only)
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('marketplaceCollectionsCollectionIdGet', 'collectionId', collectionId)
            const localVarPath = `/marketplace/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get knowledge graph data for a subscribed Collection (read-only mode)
         * @summary Get knowledge graph for MarketplaceCollection (read-only)
         * @param {string} collectionId Collection ID
         * @param {string} [label] Node label filter
         * @param {number} [maxNodes] Maximum number of nodes
         * @param {number} [maxDepth] Graph traversal depth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdGraphGet: async (collectionId: string, label?: string, maxNodes?: number, maxDepth?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('marketplaceCollectionsCollectionIdGraphGet', 'collectionId', collectionId)
            const localVarPath = `/marketplace/collections/{collection_id}/graph`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (maxNodes !== undefined) {
                localVarQueryParameter['max_nodes'] = maxNodes;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max_depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove subscription to a Collection
         * @summary Unsubscribe from a Collection
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdSubscribeDelete: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('marketplaceCollectionsCollectionIdSubscribeDelete', 'collectionId', collectionId)
            const localVarPath = `/marketplace/collections/{collection_id}/subscribe`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe to a published Collection
         * @summary Subscribe to a Collection
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdSubscribePost: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('marketplaceCollectionsCollectionIdSubscribePost', 'collectionId', collectionId)
            const localVarPath = `/marketplace/collections/{collection_id}/subscribe`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all Collections that are published to marketplace with current user\'s subscription status
         * @summary List all published Collections in marketplace
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplace/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all Collections that current user has subscribed to
         * @summary Get user\'s subscribed Collections
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsSubscriptionsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplace/collections/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get prompt templates
         * @summary Get prompt templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promptTemplatesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/prompt-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new user with an invitation token
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (register: Register, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'register' is not null or undefined
            assertParamExists('registerPost', 'register', register)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(register, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all application settings
         * @summary Get all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update one or more application settings
         * @summary Update settings
         * @param {Settings} settings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPut: async (settings: Settings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settings' is not null or undefined
            assertParamExists('settingsPut', 'settings', settings)
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test the connectivity of the MinerU API Token
         * @summary Test MinerU API Token
         * @param {SettingsTestMineruTokenPostRequest} [settingsTestMineruTokenPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsTestMineruTokenPost: async (settingsTestMineruTokenPostRequest?: SettingsTestMineruTokenPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/test_mineru_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settingsTestMineruTokenPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user info
         * @summary Get user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user
         * @summary Delete a user
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdDelete', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is for documentation and model generation only. Actual communication should use WebSocket or SSE. 
         * @summary (Doc Only) Agent message format for WebSocket/SSE
         * @param {AgentMessage} agentMessage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentMessagePost(agentMessage: AgentMessage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentMessagePost(agentMessage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.agentMessagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete API key
         * @summary Delete API key
         * @param {string} apikeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysApikeyIdDelete(apikeyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysApikeyIdDelete(apikeyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apikeysApikeyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update API key
         * @summary Update API key
         * @param {string} apikeyId 
         * @param {ApiKeyUpdate} apiKeyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysApikeyIdPut(apikeyId: string, apiKeyUpdate: ApiKeyUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysApikeyIdPut(apikeyId, apiKeyUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apikeysApikeyIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get API keys
         * @summary Get API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apikeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create API key
         * @summary Create API key
         * @param {ApiKeyCreate} apiKeyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apikeysPost(apiKeyCreate: ApiKeyCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apikeysPost(apiKeyCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apikeysPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
         * @summary Get available models with filtering
         * @param {TagFilterRequest} [tagFilterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableModelsPost(tagFilterRequest?: TagFilterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelConfigList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.availableModelsPost(tagFilterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.availableModelsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a chat (idempotent operation)
         * @summary Delete a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdDelete(botId: string, chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdDelete(botId, chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdChatsChatIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific chat
         * @summary Get chat details
         * @param {string} botId 
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdGet(botId: string, chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdGet(botId, chatId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdChatsChatIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Feedback a message
         * @summary Feedback a message
         * @param {string} botId 
         * @param {string} chatId 
         * @param {string} messageId 
         * @param {Feedback} feedback 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdMessagesMessageIdPost(botId: string, chatId: string, messageId: string, feedback: Feedback, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdMessagesMessageIdPost(botId, chatId, messageId, feedback, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdChatsChatIdMessagesMessageIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a chat
         * @summary Update a chat
         * @param {string} botId 
         * @param {string} chatId 
         * @param {ChatUpdate} chatUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsChatIdPut(botId: string, chatId: string, chatUpdate: ChatUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsChatIdPut(botId, chatId, chatUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdChatsChatIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of chats
         * @summary List chats
         * @param {string} botId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsGet(botId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsGet(botId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdChatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new chat
         * @summary Create a new chat
         * @param {string} botId 
         * @param {ChatCreate} chatCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdChatsPost(botId: string, chatCreate: ChatCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdChatsPost(botId, chatCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdChatsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a bot (idempotent operation)
         * @summary Delete a bot
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdDelete(botId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdDelete(botId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {string} botId 
         * @param {DebugFlowRequest} debugFlowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdFlowDebugPost(botId: string, debugFlowRequest: DebugFlowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdFlowDebugPost(botId, debugFlowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdFlowDebugPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get flow
         * @summary Get flow
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdFlowGet(botId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdFlowGet(botId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdFlowGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update flow
         * @summary Update flow
         * @param {string} botId 
         * @param {WorkflowDefinition} workflowDefinition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdFlowPut(botId: string, workflowDefinition: WorkflowDefinition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdFlowPut(botId, workflowDefinition, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdFlowPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific bot
         * @summary Get bot details
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdGet(botId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdGet(botId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a bot
         * @summary Update a bot
         * @param {string} botId 
         * @param {BotUpdate} botUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsBotIdPut(botId: string, botUpdate: BotUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsBotIdPut(botId, botUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsBotIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of bots
         * @summary List bots
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new bot
         * @summary Create a new bot
         * @param {BotCreate} botCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsPost(botCreate: BotCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsPost(botCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change user password
         * @summary Change user password
         * @param {ChangePassword} changePassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordPost(changePassword: ChangePassword, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordPost(changePassword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.changePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDelete(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDelete(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a document
         * @summary Delete a document
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdDelete(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdDelete(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdDocumentsDocumentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdGet(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdGet(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdDocumentsDocumentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rebuild specified types of indexes for a document
         * @summary Rebuild document indexes
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {RebuildIndexesRequest} rebuildIndexesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(collectionId: string, documentId: string, rebuildIndexesRequest: RebuildIndexesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(collectionId, documentId, rebuildIndexesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {string} collectionId 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsGet(collectionId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsGet(collectionId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {string} collectionId 
         * @param {DocumentCreate} documentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdDocumentsPost(collectionId: string, documentCreate: DocumentCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdDocumentsPost(collectionId, documentCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific collection
         * @summary Get collection details
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a collection
         * @summary Update a collection
         * @param {string} collectionId 
         * @param {CollectionUpdate} collectionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdPut(collectionId: string, collectionUpdate: CollectionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdPut(collectionId, collectionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the history of searches
         * @summary Get search history
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSearchesGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSearchesGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdSearchesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search in a collection with different search types
         * @summary Search in collection
         * @param {string} collectionId 
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSearchesPost(collectionId: string, searchRequest: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSearchesPost(collectionId, searchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdSearchesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a search
         * @summary Delete a search
         * @param {string} collectionId 
         * @param {string} searchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSearchesSearchIdDelete(collectionId: string, searchId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSearchesSearchIdDelete(collectionId, searchId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdSearchesSearchIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a collection from the public marketplace (owner only)
         * @summary Unpublish collection from marketplace
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSharingDelete(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSharingDelete(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdSharingDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the sharing status of a collection (owner only)
         * @summary Get collection sharing status
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSharingGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSharingGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdSharingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Publish a collection to the public marketplace (owner only)
         * @summary Publish collection to marketplace
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSharingPost(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSharingPost(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdSharingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trigger collection summary generation as background task
         * @summary Generate collection summary
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsCollectionIdSummaryGeneratePost(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionsCollectionIdSummaryGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCollectionIdSummaryGeneratePost(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsCollectionIdSummaryGeneratePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of collections (owned and optionally subscribed)
         * @summary List collections
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeSubscribed] Whether to include subscribed collections in results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsGet(page?: number, pageSize?: number, includeSubscribed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionViewList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsGet(page, pageSize, includeSubscribed, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new collection
         * @summary Create a new collection
         * @param {CollectionCreate} collectionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsPost(collectionCreate: CollectionCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsPost(collectionCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system configuration
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get an object from a specific document
         * @summary Get document object
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentObject(collectionId: string, documentId: string, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentObject(collectionId, documentId, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDocumentObject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a preview of a specific document
         * @summary Get document preview
         * @param {string} collectionId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentPreview(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentPreview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentPreview(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDocumentPreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all invitations
         * @summary Get all invitations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invitationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new invitation for a user to register
         * @summary Create an invitation
         * @param {InvitationCreate} invitationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitePost(invitationCreate: InvitationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitePost(invitationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invitePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get complete LLM configuration including providers and models
         * @summary Get complete LLM configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmConfigurationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmConfigurationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmConfigurationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmConfigurationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all LLM provider models, optionally filtered by provider
         * @summary List all LLM provider models
         * @param {string} [providerName] Optional filter by provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProviderModelsGet(providerName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProviderModelsGet(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProviderModelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new LLM provider with optional API key
         * @summary Create a new LLM provider
         * @param {LlmProviderCreateWithApiKey} llmProviderCreateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersPost(llmProviderCreateWithApiKey: LlmProviderCreateWithApiKey, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersPost(llmProviderCreateWithApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an LLM provider (soft delete)
         * @summary Delete an LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameDelete(providerName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameDelete(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersProviderNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific LLM provider by name
         * @summary Get a specific LLM provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameGet(providerName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameGet(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersProviderNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific model of a provider
         * @summary Delete a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelDeleteApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsApiModelDelete(providerName: string, api: LlmProvidersProviderNameModelsApiModelDeleteApiEnum, model: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsApiModelDelete(providerName, api, model, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersProviderNameModelsApiModelDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific model of a provider
         * @summary Update a provider model
         * @param {string} providerName Provider name
         * @param {LlmProvidersProviderNameModelsApiModelPutApiEnum} api API type
         * @param {string} model Model name (supports names with slashes, will be URL decoded)
         * @param {LlmProviderModelUpdate} llmProviderModelUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsApiModelPut(providerName: string, api: LlmProvidersProviderNameModelsApiModelPutApiEnum, model: string, llmProviderModelUpdate: LlmProviderModelUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsApiModelPut(providerName, api, model, llmProviderModelUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersProviderNameModelsApiModelPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all models for a specific provider
         * @summary Get models for a specific provider
         * @param {string} providerName Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsGet(providerName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsGet(providerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersProviderNameModelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new model for a specific provider
         * @summary Create a new model for a provider
         * @param {string} providerName Provider name
         * @param {LlmProviderModelCreate} llmProviderModelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNameModelsPost(providerName: string, llmProviderModelCreate: LlmProviderModelCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProviderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNameModelsPost(providerName, llmProviderModelCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersProviderNameModelsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing LLM provider with optional API key
         * @summary Update an LLM provider
         * @param {string} providerName Provider name
         * @param {LlmProviderUpdateWithApiKey} llmProviderUpdateWithApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async llmProvidersProviderNamePut(providerName: string, llmProviderUpdateWithApiKey: LlmProviderUpdateWithApiKey, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LlmProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.llmProvidersProviderNamePut(providerName, llmProviderUpdateWithApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.llmProvidersProviderNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login a user with username and password
         * @summary Login a user
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(login: Login, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(login, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logout a user
         * @summary Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get document preview for a subscribed Collection (read-only mode)
         * @summary Preview document in MarketplaceCollection (read-only)
         * @param {string} collectionId Collection ID
         * @param {string} documentId Document ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet(collectionId: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentPreview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet(collectionId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get document list for a subscribed Collection (read-only mode)
         * @summary List documents in MarketplaceCollection (read-only)
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsCollectionIdDocumentsGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsCollectionIdDocumentsGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsCollectionIdDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a subscribed Collection (read-only access)
         * @summary Get MarketplaceCollection details (read-only)
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsCollectionIdGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsCollectionIdGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsCollectionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get knowledge graph data for a subscribed Collection (read-only mode)
         * @summary Get knowledge graph for MarketplaceCollection (read-only)
         * @param {string} collectionId Collection ID
         * @param {string} [label] Node label filter
         * @param {number} [maxNodes] Maximum number of nodes
         * @param {number} [maxDepth] Graph traversal depth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsCollectionIdGraphGet(collectionId: string, label?: string, maxNodes?: number, maxDepth?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarketplaceCollectionsCollectionIdGraphGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsCollectionIdGraphGet(collectionId, label, maxNodes, maxDepth, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsCollectionIdGraphGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove subscription to a Collection
         * @summary Unsubscribe from a Collection
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsCollectionIdSubscribeDelete(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarketplaceCollectionsCollectionIdSubscribeDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsCollectionIdSubscribeDelete(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsCollectionIdSubscribeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Subscribe to a published Collection
         * @summary Subscribe to a Collection
         * @param {string} collectionId Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsCollectionIdSubscribePost(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsCollectionIdSubscribePost(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsCollectionIdSubscribePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns all Collections that are published to marketplace with current user\'s subscription status
         * @summary List all published Collections in marketplace
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedCollectionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns all Collections that current user has subscribed to
         * @summary Get user\'s subscribed Collections
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceCollectionsSubscriptionsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedCollectionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceCollectionsSubscriptionsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.marketplaceCollectionsSubscriptionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get prompt templates
         * @summary Get prompt templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promptTemplatesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptTemplateList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promptTemplatesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.promptTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register a new user with an invitation token
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(register: Register, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(register, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all application settings
         * @summary Get all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Settings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.settingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update one or more application settings
         * @summary Update settings
         * @param {Settings} settings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsPut(settings: Settings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsPut(settings, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.settingsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test the connectivity of the MinerU API Token
         * @summary Test MinerU API Token
         * @param {SettingsTestMineruTokenPostRequest} [settingsTestMineruTokenPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsTestMineruTokenPost(settingsTestMineruTokenPostRequest?: SettingsTestMineruTokenPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsTestMineruTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsTestMineruTokenPost(settingsTestMineruTokenPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.settingsTestMineruTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user info
         * @summary Get user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a user
         * @summary Delete a user
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * This endpoint is for documentation and model generation only. Actual communication should use WebSocket or SSE. 
         * @summary (Doc Only) Agent message format for WebSocket/SSE
         * @param {DefaultApiAgentMessagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentMessagePost(requestParameters: DefaultApiAgentMessagePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentMessagePost200Response> {
            return localVarFp.agentMessagePost(requestParameters.agentMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete API key
         * @summary Delete API key
         * @param {DefaultApiApikeysApikeyIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdDelete(requestParameters: DefaultApiApikeysApikeyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apikeysApikeyIdDelete(requestParameters.apikeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update API key
         * @summary Update API key
         * @param {DefaultApiApikeysApikeyIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysApikeyIdPut(requestParameters: DefaultApiApikeysApikeyIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.apikeysApikeyIdPut(requestParameters.apikeyId, requestParameters.apiKeyUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get API keys
         * @summary Get API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyList> {
            return localVarFp.apikeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create API key
         * @summary Create API key
         * @param {DefaultApiApikeysPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apikeysPost(requestParameters: DefaultApiApikeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.apikeysPost(requestParameters.apiKeyCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
         * @summary Get available models with filtering
         * @param {DefaultApiAvailableModelsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableModelsPost(requestParameters: DefaultApiAvailableModelsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ModelConfigList> {
            return localVarFp.availableModelsPost(requestParameters.tagFilterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a chat (idempotent operation)
         * @summary Delete a chat
         * @param {DefaultApiBotsBotIdChatsChatIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdDelete(requestParameters: DefaultApiBotsBotIdChatsChatIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdChatsChatIdDelete(requestParameters.botId, requestParameters.chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific chat
         * @summary Get chat details
         * @param {DefaultApiBotsBotIdChatsChatIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdGet(requestParameters: DefaultApiBotsBotIdChatsChatIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatDetails> {
            return localVarFp.botsBotIdChatsChatIdGet(requestParameters.botId, requestParameters.chatId, options).then((request) => request(axios, basePath));
        },
        /**
         * Feedback a message
         * @summary Feedback a message
         * @param {DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters: DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters.botId, requestParameters.chatId, requestParameters.messageId, requestParameters.feedback, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a chat
         * @summary Update a chat
         * @param {DefaultApiBotsBotIdChatsChatIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsChatIdPut(requestParameters: DefaultApiBotsBotIdChatsChatIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.botsBotIdChatsChatIdPut(requestParameters.botId, requestParameters.chatId, requestParameters.chatUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of chats
         * @summary List chats
         * @param {DefaultApiBotsBotIdChatsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsGet(requestParameters: DefaultApiBotsBotIdChatsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatList> {
            return localVarFp.botsBotIdChatsGet(requestParameters.botId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new chat
         * @summary Create a new chat
         * @param {DefaultApiBotsBotIdChatsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdChatsPost(requestParameters: DefaultApiBotsBotIdChatsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.botsBotIdChatsPost(requestParameters.botId, requestParameters.chatCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a bot (idempotent operation)
         * @summary Delete a bot
         * @param {DefaultApiBotsBotIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdDelete(requestParameters: DefaultApiBotsBotIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdDelete(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * Debug a flow
         * @summary Debug a flow
         * @param {DefaultApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowDebugPost(requestParameters: DefaultApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdFlowDebugPost(requestParameters.botId, requestParameters.debugFlowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get flow
         * @summary Get flow
         * @param {DefaultApiBotsBotIdFlowGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowGet(requestParameters: DefaultApiBotsBotIdFlowGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowDefinition> {
            return localVarFp.botsBotIdFlowGet(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update flow
         * @summary Update flow
         * @param {DefaultApiBotsBotIdFlowPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdFlowPut(requestParameters: DefaultApiBotsBotIdFlowPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdFlowPut(requestParameters.botId, requestParameters.workflowDefinition, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific bot
         * @summary Get bot details
         * @param {DefaultApiBotsBotIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdGet(requestParameters: DefaultApiBotsBotIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot> {
            return localVarFp.botsBotIdGet(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a bot
         * @summary Update a bot
         * @param {DefaultApiBotsBotIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIdPut(requestParameters: DefaultApiBotsBotIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.botsBotIdPut(requestParameters.botId, requestParameters.botUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of bots
         * @summary List bots
         * @param {DefaultApiBotsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet(requestParameters: DefaultApiBotsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BotList> {
            return localVarFp.botsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new bot
         * @summary Create a new bot
         * @param {DefaultApiBotsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsPost(requestParameters: DefaultApiBotsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot> {
            return localVarFp.botsPost(requestParameters.botCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Change user password
         * @summary Change user password
         * @param {DefaultApiChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordPost(requestParameters: DefaultApiChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePasswordPost(requestParameters.changePassword, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {DefaultApiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDelete(requestParameters: DefaultApiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdDelete(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a document
         * @summary Delete a document
         * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific document
         * @summary Get document details
         * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Rebuild specified types of indexes for a document
         * @summary Rebuild document indexes
         * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters.collectionId, requestParameters.documentId, requestParameters.rebuildIndexesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of documents
         * @summary List documents
         * @param {DefaultApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsGet(requestParameters: DefaultApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.collectionsCollectionIdDocumentsGet(requestParameters.collectionId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new document
         * @summary Create a new document
         * @param {DefaultApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdDocumentsPost(requestParameters: DefaultApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.collectionsCollectionIdDocumentsPost(requestParameters.collectionId, requestParameters.documentCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific collection
         * @summary Get collection details
         * @param {DefaultApiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdGet(requestParameters: DefaultApiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.collectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a collection
         * @summary Update a collection
         * @param {DefaultApiCollectionsCollectionIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdPut(requestParameters: DefaultApiCollectionsCollectionIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.collectionsCollectionIdPut(requestParameters.collectionId, requestParameters.collectionUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the history of searches
         * @summary Get search history
         * @param {DefaultApiCollectionsCollectionIdSearchesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesGet(requestParameters: DefaultApiCollectionsCollectionIdSearchesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResultList> {
            return localVarFp.collectionsCollectionIdSearchesGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search in a collection with different search types
         * @summary Search in collection
         * @param {DefaultApiCollectionsCollectionIdSearchesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesPost(requestParameters: DefaultApiCollectionsCollectionIdSearchesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResult> {
            return localVarFp.collectionsCollectionIdSearchesPost(requestParameters.collectionId, requestParameters.searchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a search
         * @summary Delete a search
         * @param {DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSearchesSearchIdDelete(requestParameters: DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdSearchesSearchIdDelete(requestParameters.collectionId, requestParameters.searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a collection from the public marketplace (owner only)
         * @summary Unpublish collection from marketplace
         * @param {DefaultApiCollectionsCollectionIdSharingDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSharingDelete(requestParameters: DefaultApiCollectionsCollectionIdSharingDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdSharingDelete(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the sharing status of a collection (owner only)
         * @summary Get collection sharing status
         * @param {DefaultApiCollectionsCollectionIdSharingGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSharingGet(requestParameters: DefaultApiCollectionsCollectionIdSharingGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharingStatusResponse> {
            return localVarFp.collectionsCollectionIdSharingGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a collection to the public marketplace (owner only)
         * @summary Publish collection to marketplace
         * @param {DefaultApiCollectionsCollectionIdSharingPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSharingPost(requestParameters: DefaultApiCollectionsCollectionIdSharingPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionsCollectionIdSharingPost(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger collection summary generation as background task
         * @summary Generate collection summary
         * @param {DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsCollectionIdSummaryGeneratePost(requestParameters: DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionsCollectionIdSummaryGeneratePost200Response> {
            return localVarFp.collectionsCollectionIdSummaryGeneratePost(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of collections (owned and optionally subscribed)
         * @summary List collections
         * @param {DefaultApiCollectionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsGet(requestParameters: DefaultApiCollectionsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CollectionViewList> {
            return localVarFp.collectionsGet(requestParameters.page, requestParameters.pageSize, requestParameters.includeSubscribed, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new collection
         * @summary Create a new collection
         * @param {DefaultApiCollectionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsPost(requestParameters: DefaultApiCollectionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.collectionsPost(requestParameters.collectionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system configuration
         * @summary Get system configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configGet(options?: RawAxiosRequestConfig): AxiosPromise<Config> {
            return localVarFp.configGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an object from a specific document
         * @summary Get document object
         * @param {DefaultApiGetDocumentObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentObject(requestParameters: DefaultApiGetDocumentObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDocumentObject(requestParameters.collectionId, requestParameters.documentId, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a preview of a specific document
         * @summary Get document preview
         * @param {DefaultApiGetDocumentPreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentPreview(requestParameters: DefaultApiGetDocumentPreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentPreview> {
            return localVarFp.getDocumentPreview(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all invitations
         * @summary Get all invitations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationsGet(options?: RawAxiosRequestConfig): AxiosPromise<InvitationList> {
            return localVarFp.invitationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new invitation for a user to register
         * @summary Create an invitation
         * @param {DefaultApiInvitePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitePost(requestParameters: DefaultApiInvitePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Invitation> {
            return localVarFp.invitePost(requestParameters.invitationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get complete LLM configuration including providers and models
         * @summary Get complete LLM configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmConfigurationGet(options?: RawAxiosRequestConfig): AxiosPromise<LlmConfigurationResponse> {
            return localVarFp.llmConfigurationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List all LLM provider models, optionally filtered by provider
         * @summary List all LLM provider models
         * @param {DefaultApiLlmProviderModelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProviderModelsGet(requestParameters: DefaultApiLlmProviderModelsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList> {
            return localVarFp.llmProviderModelsGet(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new LLM provider with optional API key
         * @summary Create a new LLM provider
         * @param {DefaultApiLlmProvidersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersPost(requestParameters: DefaultApiLlmProvidersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider> {
            return localVarFp.llmProvidersPost(requestParameters.llmProviderCreateWithApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an LLM provider (soft delete)
         * @summary Delete an LLM provider
         * @param {DefaultApiLlmProvidersProviderNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameDelete(requestParameters: DefaultApiLlmProvidersProviderNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.llmProvidersProviderNameDelete(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific LLM provider by name
         * @summary Get a specific LLM provider
         * @param {DefaultApiLlmProvidersProviderNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameGet(requestParameters: DefaultApiLlmProvidersProviderNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider> {
            return localVarFp.llmProvidersProviderNameGet(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific model of a provider
         * @summary Delete a provider model
         * @param {DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelDelete(requestParameters: DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.llmProvidersProviderNameModelsApiModelDelete(requestParameters.providerName, requestParameters.api, requestParameters.model, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific model of a provider
         * @summary Update a provider model
         * @param {DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsApiModelPut(requestParameters: DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel> {
            return localVarFp.llmProvidersProviderNameModelsApiModelPut(requestParameters.providerName, requestParameters.api, requestParameters.model, requestParameters.llmProviderModelUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all models for a specific provider
         * @summary Get models for a specific provider
         * @param {DefaultApiLlmProvidersProviderNameModelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsGet(requestParameters: DefaultApiLlmProvidersProviderNameModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList> {
            return localVarFp.llmProvidersProviderNameModelsGet(requestParameters.providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new model for a specific provider
         * @summary Create a new model for a provider
         * @param {DefaultApiLlmProvidersProviderNameModelsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNameModelsPost(requestParameters: DefaultApiLlmProvidersProviderNameModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel> {
            return localVarFp.llmProvidersProviderNameModelsPost(requestParameters.providerName, requestParameters.llmProviderModelCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing LLM provider with optional API key
         * @summary Update an LLM provider
         * @param {DefaultApiLlmProvidersProviderNamePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        llmProvidersProviderNamePut(requestParameters: DefaultApiLlmProvidersProviderNamePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider> {
            return localVarFp.llmProvidersProviderNamePut(requestParameters.providerName, requestParameters.llmProviderUpdateWithApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Login a user with username and password
         * @summary Login a user
         * @param {DefaultApiLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(requestParameters: DefaultApiLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.loginPost(requestParameters.login, options).then((request) => request(axios, basePath));
        },
        /**
         * Logout a user
         * @summary Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Get document preview for a subscribed Collection (read-only mode)
         * @summary Preview document in MarketplaceCollection (read-only)
         * @param {DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentPreview> {
            return localVarFp.marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get document list for a subscribed Collection (read-only mode)
         * @summary List documents in MarketplaceCollection (read-only)
         * @param {DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdDocumentsGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.marketplaceCollectionsCollectionIdDocumentsGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a subscribed Collection (read-only access)
         * @summary Get MarketplaceCollection details (read-only)
         * @param {DefaultApiMarketplaceCollectionsCollectionIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollection> {
            return localVarFp.marketplaceCollectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get knowledge graph data for a subscribed Collection (read-only mode)
         * @summary Get knowledge graph for MarketplaceCollection (read-only)
         * @param {DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdGraphGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MarketplaceCollectionsCollectionIdGraphGet200Response> {
            return localVarFp.marketplaceCollectionsCollectionIdGraphGet(requestParameters.collectionId, requestParameters.label, requestParameters.maxNodes, requestParameters.maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove subscription to a Collection
         * @summary Unsubscribe from a Collection
         * @param {DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdSubscribeDelete(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<MarketplaceCollectionsCollectionIdSubscribeDelete200Response> {
            return localVarFp.marketplaceCollectionsCollectionIdSubscribeDelete(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe to a published Collection
         * @summary Subscribe to a Collection
         * @param {DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsCollectionIdSubscribePost(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollection> {
            return localVarFp.marketplaceCollectionsCollectionIdSubscribePost(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all Collections that are published to marketplace with current user\'s subscription status
         * @summary List all published Collections in marketplace
         * @param {DefaultApiMarketplaceCollectionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsGet(requestParameters: DefaultApiMarketplaceCollectionsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollectionList> {
            return localVarFp.marketplaceCollectionsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all Collections that current user has subscribed to
         * @summary Get user\'s subscribed Collections
         * @param {DefaultApiMarketplaceCollectionsSubscriptionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceCollectionsSubscriptionsGet(requestParameters: DefaultApiMarketplaceCollectionsSubscriptionsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollectionList> {
            return localVarFp.marketplaceCollectionsSubscriptionsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get prompt templates
         * @summary Get prompt templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promptTemplatesGet(options?: RawAxiosRequestConfig): AxiosPromise<PromptTemplateList> {
            return localVarFp.promptTemplatesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new user with an invitation token
         * @summary Register a new user
         * @param {DefaultApiRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(requestParameters: DefaultApiRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.registerPost(requestParameters.register, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all application settings
         * @summary Get all settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet(options?: RawAxiosRequestConfig): AxiosPromise<Settings> {
            return localVarFp.settingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update one or more application settings
         * @summary Update settings
         * @param {DefaultApiSettingsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPut(requestParameters: DefaultApiSettingsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.settingsPut(requestParameters.settings, options).then((request) => request(axios, basePath));
        },
        /**
         * Test the connectivity of the MinerU API Token
         * @summary Test MinerU API Token
         * @param {DefaultApiSettingsTestMineruTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsTestMineruTokenPost(requestParameters: DefaultApiSettingsTestMineruTokenPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SettingsTestMineruTokenPost200Response> {
            return localVarFp.settingsTestMineruTokenPost(requestParameters.settingsTestMineruTokenPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user info
         * @summary Get user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.userGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: RawAxiosRequestConfig): AxiosPromise<UserList> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user
         * @summary Delete a user
         * @param {DefaultApiUsersUserIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(requestParameters: DefaultApiUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersUserIdDelete(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * This endpoint is for documentation and model generation only. Actual communication should use WebSocket or SSE. 
     * @summary (Doc Only) Agent message format for WebSocket/SSE
     * @param {DefaultApiAgentMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    agentMessagePost(requestParameters: DefaultApiAgentMessagePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentMessagePost200Response>;

    /**
     * Delete API key
     * @summary Delete API key
     * @param {DefaultApiApikeysApikeyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apikeysApikeyIdDelete(requestParameters: DefaultApiApikeysApikeyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update API key
     * @summary Update API key
     * @param {DefaultApiApikeysApikeyIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apikeysApikeyIdPut(requestParameters: DefaultApiApikeysApikeyIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey>;

    /**
     * Get API keys
     * @summary Get API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apikeysGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyList>;

    /**
     * Create API key
     * @summary Create API key
     * @param {DefaultApiApikeysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apikeysPost(requestParameters: DefaultApiApikeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey>;

    /**
     * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
     * @summary Get available models with filtering
     * @param {DefaultApiAvailableModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    availableModelsPost(requestParameters?: DefaultApiAvailableModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelConfigList>;

    /**
     * Delete a chat (idempotent operation)
     * @summary Delete a chat
     * @param {DefaultApiBotsBotIdChatsChatIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdChatsChatIdDelete(requestParameters: DefaultApiBotsBotIdChatsChatIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific chat
     * @summary Get chat details
     * @param {DefaultApiBotsBotIdChatsChatIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdChatsChatIdGet(requestParameters: DefaultApiBotsBotIdChatsChatIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatDetails>;

    /**
     * Feedback a message
     * @summary Feedback a message
     * @param {DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters: DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update a chat
     * @summary Update a chat
     * @param {DefaultApiBotsBotIdChatsChatIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdChatsChatIdPut(requestParameters: DefaultApiBotsBotIdChatsChatIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat>;

    /**
     * Get a list of chats
     * @summary List chats
     * @param {DefaultApiBotsBotIdChatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdChatsGet(requestParameters: DefaultApiBotsBotIdChatsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatList>;

    /**
     * Create a new chat
     * @summary Create a new chat
     * @param {DefaultApiBotsBotIdChatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdChatsPost(requestParameters: DefaultApiBotsBotIdChatsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat>;

    /**
     * Delete a bot (idempotent operation)
     * @summary Delete a bot
     * @param {DefaultApiBotsBotIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdDelete(requestParameters: DefaultApiBotsBotIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Debug a flow
     * @summary Debug a flow
     * @param {DefaultApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdFlowDebugPost(requestParameters: DefaultApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get flow
     * @summary Get flow
     * @param {DefaultApiBotsBotIdFlowGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdFlowGet(requestParameters: DefaultApiBotsBotIdFlowGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowDefinition>;

    /**
     * Update flow
     * @summary Update flow
     * @param {DefaultApiBotsBotIdFlowPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdFlowPut(requestParameters: DefaultApiBotsBotIdFlowPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific bot
     * @summary Get bot details
     * @param {DefaultApiBotsBotIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdGet(requestParameters: DefaultApiBotsBotIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot>;

    /**
     * Update a bot
     * @summary Update a bot
     * @param {DefaultApiBotsBotIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsBotIdPut(requestParameters: DefaultApiBotsBotIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a list of bots
     * @summary List bots
     * @param {DefaultApiBotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsGet(requestParameters?: DefaultApiBotsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BotList>;

    /**
     * Create a new bot
     * @summary Create a new bot
     * @param {DefaultApiBotsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsPost(requestParameters: DefaultApiBotsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bot>;

    /**
     * Change user password
     * @summary Change user password
     * @param {DefaultApiChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    changePasswordPost(requestParameters: DefaultApiChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Delete a collection
     * @summary Delete a collection
     * @param {DefaultApiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdDelete(requestParameters: DefaultApiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Delete a document
     * @summary Delete a document
     * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific document
     * @summary Get document details
     * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Document>;

    /**
     * Rebuild specified types of indexes for a document
     * @summary Rebuild document indexes
     * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a list of documents
     * @summary List documents
     * @param {DefaultApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdDocumentsGet(requestParameters: DefaultApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList>;

    /**
     * Create a new document
     * @summary Create a new document
     * @param {DefaultApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdDocumentsPost(requestParameters: DefaultApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList>;

    /**
     * Get details of a specific collection
     * @summary Get collection details
     * @param {DefaultApiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdGet(requestParameters: DefaultApiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection>;

    /**
     * Update a collection
     * @summary Update a collection
     * @param {DefaultApiCollectionsCollectionIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdPut(requestParameters: DefaultApiCollectionsCollectionIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection>;

    /**
     * Get the history of searches
     * @summary Get search history
     * @param {DefaultApiCollectionsCollectionIdSearchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdSearchesGet(requestParameters: DefaultApiCollectionsCollectionIdSearchesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResultList>;

    /**
     * Search in a collection with different search types
     * @summary Search in collection
     * @param {DefaultApiCollectionsCollectionIdSearchesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdSearchesPost(requestParameters: DefaultApiCollectionsCollectionIdSearchesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResult>;

    /**
     * Delete a search
     * @summary Delete a search
     * @param {DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdSearchesSearchIdDelete(requestParameters: DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Remove a collection from the public marketplace (owner only)
     * @summary Unpublish collection from marketplace
     * @param {DefaultApiCollectionsCollectionIdSharingDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdSharingDelete(requestParameters: DefaultApiCollectionsCollectionIdSharingDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get the sharing status of a collection (owner only)
     * @summary Get collection sharing status
     * @param {DefaultApiCollectionsCollectionIdSharingGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdSharingGet(requestParameters: DefaultApiCollectionsCollectionIdSharingGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharingStatusResponse>;

    /**
     * Publish a collection to the public marketplace (owner only)
     * @summary Publish collection to marketplace
     * @param {DefaultApiCollectionsCollectionIdSharingPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdSharingPost(requestParameters: DefaultApiCollectionsCollectionIdSharingPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Trigger collection summary generation as background task
     * @summary Generate collection summary
     * @param {DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsCollectionIdSummaryGeneratePost(requestParameters: DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionsCollectionIdSummaryGeneratePost200Response>;

    /**
     * Get a list of collections (owned and optionally subscribed)
     * @summary List collections
     * @param {DefaultApiCollectionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsGet(requestParameters?: DefaultApiCollectionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionViewList>;

    /**
     * Create a new collection
     * @summary Create a new collection
     * @param {DefaultApiCollectionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectionsPost(requestParameters: DefaultApiCollectionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Collection>;

    /**
     * Get system configuration
     * @summary Get system configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    configGet(options?: RawAxiosRequestConfig): AxiosPromise<Config>;

    /**
     * Get an object from a specific document
     * @summary Get document object
     * @param {DefaultApiGetDocumentObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDocumentObject(requestParameters: DefaultApiGetDocumentObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a preview of a specific document
     * @summary Get document preview
     * @param {DefaultApiGetDocumentPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDocumentPreview(requestParameters: DefaultApiGetDocumentPreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentPreview>;

    /**
     * Get all invitations
     * @summary Get all invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    invitationsGet(options?: RawAxiosRequestConfig): AxiosPromise<InvitationList>;

    /**
     * Create a new invitation for a user to register
     * @summary Create an invitation
     * @param {DefaultApiInvitePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    invitePost(requestParameters: DefaultApiInvitePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Invitation>;

    /**
     * Get complete LLM configuration including providers and models
     * @summary Get complete LLM configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmConfigurationGet(options?: RawAxiosRequestConfig): AxiosPromise<LlmConfigurationResponse>;

    /**
     * List all LLM provider models, optionally filtered by provider
     * @summary List all LLM provider models
     * @param {DefaultApiLlmProviderModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProviderModelsGet(requestParameters?: DefaultApiLlmProviderModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList>;

    /**
     * Create a new LLM provider with optional API key
     * @summary Create a new LLM provider
     * @param {DefaultApiLlmProvidersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersPost(requestParameters: DefaultApiLlmProvidersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider>;

    /**
     * Delete an LLM provider (soft delete)
     * @summary Delete an LLM provider
     * @param {DefaultApiLlmProvidersProviderNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersProviderNameDelete(requestParameters: DefaultApiLlmProvidersProviderNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a specific LLM provider by name
     * @summary Get a specific LLM provider
     * @param {DefaultApiLlmProvidersProviderNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersProviderNameGet(requestParameters: DefaultApiLlmProvidersProviderNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider>;

    /**
     * Delete a specific model of a provider
     * @summary Delete a provider model
     * @param {DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersProviderNameModelsApiModelDelete(requestParameters: DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Update a specific model of a provider
     * @summary Update a provider model
     * @param {DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersProviderNameModelsApiModelPut(requestParameters: DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel>;

    /**
     * Get all models for a specific provider
     * @summary Get models for a specific provider
     * @param {DefaultApiLlmProvidersProviderNameModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersProviderNameModelsGet(requestParameters: DefaultApiLlmProvidersProviderNameModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModelList>;

    /**
     * Create a new model for a specific provider
     * @summary Create a new model for a provider
     * @param {DefaultApiLlmProvidersProviderNameModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersProviderNameModelsPost(requestParameters: DefaultApiLlmProvidersProviderNameModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProviderModel>;

    /**
     * Update an existing LLM provider with optional API key
     * @summary Update an LLM provider
     * @param {DefaultApiLlmProvidersProviderNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    llmProvidersProviderNamePut(requestParameters: DefaultApiLlmProvidersProviderNamePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<LlmProvider>;

    /**
     * Login a user with username and password
     * @summary Login a user
     * @param {DefaultApiLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    loginPost(requestParameters: DefaultApiLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * Logout a user
     * @summary Logout a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    logoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get document preview for a subscribed Collection (read-only mode)
     * @summary Preview document in MarketplaceCollection (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentPreview>;

    /**
     * Get document list for a subscribed Collection (read-only mode)
     * @summary List documents in MarketplaceCollection (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsCollectionIdDocumentsGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentList>;

    /**
     * Get details of a subscribed Collection (read-only access)
     * @summary Get MarketplaceCollection details (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsCollectionIdGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollection>;

    /**
     * Get knowledge graph data for a subscribed Collection (read-only mode)
     * @summary Get knowledge graph for MarketplaceCollection (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsCollectionIdGraphGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MarketplaceCollectionsCollectionIdGraphGet200Response>;

    /**
     * Remove subscription to a Collection
     * @summary Unsubscribe from a Collection
     * @param {DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsCollectionIdSubscribeDelete(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<MarketplaceCollectionsCollectionIdSubscribeDelete200Response>;

    /**
     * Subscribe to a published Collection
     * @summary Subscribe to a Collection
     * @param {DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsCollectionIdSubscribePost(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollection>;

    /**
     * Returns all Collections that are published to marketplace with current user\'s subscription status
     * @summary List all published Collections in marketplace
     * @param {DefaultApiMarketplaceCollectionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsGet(requestParameters?: DefaultApiMarketplaceCollectionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollectionList>;

    /**
     * Returns all Collections that current user has subscribed to
     * @summary Get user\'s subscribed Collections
     * @param {DefaultApiMarketplaceCollectionsSubscriptionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    marketplaceCollectionsSubscriptionsGet(requestParameters?: DefaultApiMarketplaceCollectionsSubscriptionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SharedCollectionList>;

    /**
     * Get prompt templates
     * @summary Get prompt templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    promptTemplatesGet(options?: RawAxiosRequestConfig): AxiosPromise<PromptTemplateList>;

    /**
     * Register a new user with an invitation token
     * @summary Register a new user
     * @param {DefaultApiRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    registerPost(requestParameters: DefaultApiRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * Retrieve all application settings
     * @summary Get all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    settingsGet(options?: RawAxiosRequestConfig): AxiosPromise<Settings>;

    /**
     * Update one or more application settings
     * @summary Update settings
     * @param {DefaultApiSettingsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    settingsPut(requestParameters: DefaultApiSettingsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Test the connectivity of the MinerU API Token
     * @summary Test MinerU API Token
     * @param {DefaultApiSettingsTestMineruTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    settingsTestMineruTokenPost(requestParameters?: DefaultApiSettingsTestMineruTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SettingsTestMineruTokenPost200Response>;

    /**
     * Get user info
     * @summary Get user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userGet(options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * Get all users
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersGet(options?: RawAxiosRequestConfig): AxiosPromise<UserList>;

    /**
     * Delete a user
     * @summary Delete a user
     * @param {DefaultApiUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersUserIdDelete(requestParameters: DefaultApiUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for agentMessagePost operation in DefaultApi.
 * @export
 * @interface DefaultApiAgentMessagePostRequest
 */
export interface DefaultApiAgentMessagePostRequest {
    /**
     * 
     * @type {AgentMessage}
     * @memberof DefaultApiAgentMessagePost
     */
    readonly agentMessage: AgentMessage
}

/**
 * Request parameters for apikeysApikeyIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApikeysApikeyIdDeleteRequest
 */
export interface DefaultApiApikeysApikeyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApikeysApikeyIdDelete
     */
    readonly apikeyId: string
}

/**
 * Request parameters for apikeysApikeyIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApikeysApikeyIdPutRequest
 */
export interface DefaultApiApikeysApikeyIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApikeysApikeyIdPut
     */
    readonly apikeyId: string

    /**
     * 
     * @type {ApiKeyUpdate}
     * @memberof DefaultApiApikeysApikeyIdPut
     */
    readonly apiKeyUpdate: ApiKeyUpdate
}

/**
 * Request parameters for apikeysPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApikeysPostRequest
 */
export interface DefaultApiApikeysPostRequest {
    /**
     * 
     * @type {ApiKeyCreate}
     * @memberof DefaultApiApikeysPost
     */
    readonly apiKeyCreate: ApiKeyCreate
}

/**
 * Request parameters for availableModelsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiAvailableModelsPostRequest
 */
export interface DefaultApiAvailableModelsPostRequest {
    /**
     * 
     * @type {TagFilterRequest}
     * @memberof DefaultApiAvailableModelsPost
     */
    readonly tagFilterRequest?: TagFilterRequest
}

/**
 * Request parameters for botsBotIdChatsChatIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdChatsChatIdDeleteRequest
 */
export interface DefaultApiBotsBotIdChatsChatIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdDelete
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdDelete
     */
    readonly chatId: string
}

/**
 * Request parameters for botsBotIdChatsChatIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdChatsChatIdGetRequest
 */
export interface DefaultApiBotsBotIdChatsChatIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdGet
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdGet
     */
    readonly chatId: string
}

/**
 * Request parameters for botsBotIdChatsChatIdMessagesMessageIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest
 */
export interface DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly chatId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly messageId: string

    /**
     * 
     * @type {Feedback}
     * @memberof DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPost
     */
    readonly feedback: Feedback
}

/**
 * Request parameters for botsBotIdChatsChatIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdChatsChatIdPutRequest
 */
export interface DefaultApiBotsBotIdChatsChatIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdPut
     */
    readonly botId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsChatIdPut
     */
    readonly chatId: string

    /**
     * 
     * @type {ChatUpdate}
     * @memberof DefaultApiBotsBotIdChatsChatIdPut
     */
    readonly chatUpdate: ChatUpdate
}

/**
 * Request parameters for botsBotIdChatsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdChatsGetRequest
 */
export interface DefaultApiBotsBotIdChatsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsGet
     */
    readonly botId: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiBotsBotIdChatsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiBotsBotIdChatsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for botsBotIdChatsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdChatsPostRequest
 */
export interface DefaultApiBotsBotIdChatsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdChatsPost
     */
    readonly botId: string

    /**
     * 
     * @type {ChatCreate}
     * @memberof DefaultApiBotsBotIdChatsPost
     */
    readonly chatCreate: ChatCreate
}

/**
 * Request parameters for botsBotIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdDeleteRequest
 */
export interface DefaultApiBotsBotIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdDelete
     */
    readonly botId: string
}

/**
 * Request parameters for botsBotIdFlowDebugPost operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdFlowDebugPostRequest
 */
export interface DefaultApiBotsBotIdFlowDebugPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdFlowDebugPost
     */
    readonly botId: string

    /**
     * 
     * @type {DebugFlowRequest}
     * @memberof DefaultApiBotsBotIdFlowDebugPost
     */
    readonly debugFlowRequest: DebugFlowRequest
}

/**
 * Request parameters for botsBotIdFlowGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdFlowGetRequest
 */
export interface DefaultApiBotsBotIdFlowGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdFlowGet
     */
    readonly botId: string
}

/**
 * Request parameters for botsBotIdFlowPut operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdFlowPutRequest
 */
export interface DefaultApiBotsBotIdFlowPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdFlowPut
     */
    readonly botId: string

    /**
     * 
     * @type {WorkflowDefinition}
     * @memberof DefaultApiBotsBotIdFlowPut
     */
    readonly workflowDefinition: WorkflowDefinition
}

/**
 * Request parameters for botsBotIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdGetRequest
 */
export interface DefaultApiBotsBotIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdGet
     */
    readonly botId: string
}

/**
 * Request parameters for botsBotIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsBotIdPutRequest
 */
export interface DefaultApiBotsBotIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiBotsBotIdPut
     */
    readonly botId: string

    /**
     * 
     * @type {BotUpdate}
     * @memberof DefaultApiBotsBotIdPut
     */
    readonly botUpdate: BotUpdate
}

/**
 * Request parameters for botsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsGetRequest
 */
export interface DefaultApiBotsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiBotsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiBotsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for botsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsPostRequest
 */
export interface DefaultApiBotsPostRequest {
    /**
     * 
     * @type {BotCreate}
     * @memberof DefaultApiBotsPost
     */
    readonly botCreate: BotCreate
}

/**
 * Request parameters for changePasswordPost operation in DefaultApi.
 * @export
 * @interface DefaultApiChangePasswordPostRequest
 */
export interface DefaultApiChangePasswordPostRequest {
    /**
     * 
     * @type {ChangePassword}
     * @memberof DefaultApiChangePasswordPost
     */
    readonly changePassword: ChangePassword
}

/**
 * Request parameters for collectionsCollectionIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdDeleteRequest
 */
export interface DefaultApiCollectionsCollectionIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDelete
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest
 */
export interface DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsDocumentIdDelete
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsDocumentIdDelete
     */
    readonly documentId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest
 */
export interface DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsDocumentIdGet
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsDocumentIdGet
     */
    readonly documentId: string
}

/**
 * Request parameters for collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest
 */
export interface DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost
     */
    readonly documentId: string

    /**
     * 
     * @type {RebuildIndexesRequest}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost
     */
    readonly rebuildIndexesRequest: RebuildIndexesRequest
}

/**
 * Request parameters for collectionsCollectionIdDocumentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdDocumentsGetRequest
 */
export interface DefaultApiCollectionsCollectionIdDocumentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsGet
     */
    readonly collectionId: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for collectionsCollectionIdDocumentsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdDocumentsPostRequest
 */
export interface DefaultApiCollectionsCollectionIdDocumentsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {DocumentCreate}
     * @memberof DefaultApiCollectionsCollectionIdDocumentsPost
     */
    readonly documentCreate: DocumentCreate
}

/**
 * Request parameters for collectionsCollectionIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdGetRequest
 */
export interface DefaultApiCollectionsCollectionIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdPutRequest
 */
export interface DefaultApiCollectionsCollectionIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdPut
     */
    readonly collectionId: string

    /**
     * 
     * @type {CollectionUpdate}
     * @memberof DefaultApiCollectionsCollectionIdPut
     */
    readonly collectionUpdate: CollectionUpdate
}

/**
 * Request parameters for collectionsCollectionIdSearchesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdSearchesGetRequest
 */
export interface DefaultApiCollectionsCollectionIdSearchesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSearchesGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdSearchesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdSearchesPostRequest
 */
export interface DefaultApiCollectionsCollectionIdSearchesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSearchesPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {SearchRequest}
     * @memberof DefaultApiCollectionsCollectionIdSearchesPost
     */
    readonly searchRequest: SearchRequest
}

/**
 * Request parameters for collectionsCollectionIdSearchesSearchIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest
 */
export interface DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSearchesSearchIdDelete
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSearchesSearchIdDelete
     */
    readonly searchId: string
}

/**
 * Request parameters for collectionsCollectionIdSharingDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdSharingDeleteRequest
 */
export interface DefaultApiCollectionsCollectionIdSharingDeleteRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSharingDelete
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdSharingGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdSharingGetRequest
 */
export interface DefaultApiCollectionsCollectionIdSharingGetRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSharingGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdSharingPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdSharingPostRequest
 */
export interface DefaultApiCollectionsCollectionIdSharingPostRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSharingPost
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsCollectionIdSummaryGeneratePost operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest
 */
export interface DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCollectionsCollectionIdSummaryGeneratePost
     */
    readonly collectionId: string
}

/**
 * Request parameters for collectionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsGetRequest
 */
export interface DefaultApiCollectionsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiCollectionsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiCollectionsGet
     */
    readonly pageSize?: number

    /**
     * Whether to include subscribed collections in results
     * @type {boolean}
     * @memberof DefaultApiCollectionsGet
     */
    readonly includeSubscribed?: boolean
}

/**
 * Request parameters for collectionsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCollectionsPostRequest
 */
export interface DefaultApiCollectionsPostRequest {
    /**
     * 
     * @type {CollectionCreate}
     * @memberof DefaultApiCollectionsPost
     */
    readonly collectionCreate: CollectionCreate
}

/**
 * Request parameters for getDocumentObject operation in DefaultApi.
 * @export
 * @interface DefaultApiGetDocumentObjectRequest
 */
export interface DefaultApiGetDocumentObjectRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetDocumentObject
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetDocumentObject
     */
    readonly documentId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetDocumentObject
     */
    readonly path: string
}

/**
 * Request parameters for getDocumentPreview operation in DefaultApi.
 * @export
 * @interface DefaultApiGetDocumentPreviewRequest
 */
export interface DefaultApiGetDocumentPreviewRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetDocumentPreview
     */
    readonly collectionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetDocumentPreview
     */
    readonly documentId: string
}

/**
 * Request parameters for invitePost operation in DefaultApi.
 * @export
 * @interface DefaultApiInvitePostRequest
 */
export interface DefaultApiInvitePostRequest {
    /**
     * 
     * @type {InvitationCreate}
     * @memberof DefaultApiInvitePost
     */
    readonly invitationCreate: InvitationCreate
}

/**
 * Request parameters for llmProviderModelsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProviderModelsGetRequest
 */
export interface DefaultApiLlmProviderModelsGetRequest {
    /**
     * Optional filter by provider name
     * @type {string}
     * @memberof DefaultApiLlmProviderModelsGet
     */
    readonly providerName?: string
}

/**
 * Request parameters for llmProvidersPost operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersPostRequest
 */
export interface DefaultApiLlmProvidersPostRequest {
    /**
     * 
     * @type {LlmProviderCreateWithApiKey}
     * @memberof DefaultApiLlmProvidersPost
     */
    readonly llmProviderCreateWithApiKey: LlmProviderCreateWithApiKey
}

/**
 * Request parameters for llmProvidersProviderNameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersProviderNameDeleteRequest
 */
export interface DefaultApiLlmProvidersProviderNameDeleteRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameDelete
     */
    readonly providerName: string
}

/**
 * Request parameters for llmProvidersProviderNameGet operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersProviderNameGetRequest
 */
export interface DefaultApiLlmProvidersProviderNameGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameGet
     */
    readonly providerName: string
}

/**
 * Request parameters for llmProvidersProviderNameModelsApiModelDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest
 */
export interface DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameModelsApiModelDelete
     */
    readonly providerName: string

    /**
     * API type
     * @type {'completion' | 'embedding' | 'rerank'}
     * @memberof DefaultApiLlmProvidersProviderNameModelsApiModelDelete
     */
    readonly api: LlmProvidersProviderNameModelsApiModelDeleteApiEnum

    /**
     * Model name (supports names with slashes, will be URL decoded)
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameModelsApiModelDelete
     */
    readonly model: string
}

/**
 * Request parameters for llmProvidersProviderNameModelsApiModelPut operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest
 */
export interface DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly providerName: string

    /**
     * API type
     * @type {'completion' | 'embedding' | 'rerank'}
     * @memberof DefaultApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly api: LlmProvidersProviderNameModelsApiModelPutApiEnum

    /**
     * Model name (supports names with slashes, will be URL decoded)
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly model: string

    /**
     * 
     * @type {LlmProviderModelUpdate}
     * @memberof DefaultApiLlmProvidersProviderNameModelsApiModelPut
     */
    readonly llmProviderModelUpdate: LlmProviderModelUpdate
}

/**
 * Request parameters for llmProvidersProviderNameModelsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersProviderNameModelsGetRequest
 */
export interface DefaultApiLlmProvidersProviderNameModelsGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameModelsGet
     */
    readonly providerName: string
}

/**
 * Request parameters for llmProvidersProviderNameModelsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersProviderNameModelsPostRequest
 */
export interface DefaultApiLlmProvidersProviderNameModelsPostRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNameModelsPost
     */
    readonly providerName: string

    /**
     * 
     * @type {LlmProviderModelCreate}
     * @memberof DefaultApiLlmProvidersProviderNameModelsPost
     */
    readonly llmProviderModelCreate: LlmProviderModelCreate
}

/**
 * Request parameters for llmProvidersProviderNamePut operation in DefaultApi.
 * @export
 * @interface DefaultApiLlmProvidersProviderNamePutRequest
 */
export interface DefaultApiLlmProvidersProviderNamePutRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof DefaultApiLlmProvidersProviderNamePut
     */
    readonly providerName: string

    /**
     * 
     * @type {LlmProviderUpdateWithApiKey}
     * @memberof DefaultApiLlmProvidersProviderNamePut
     */
    readonly llmProviderUpdateWithApiKey: LlmProviderUpdateWithApiKey
}

/**
 * Request parameters for loginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiLoginPostRequest
 */
export interface DefaultApiLoginPostRequest {
    /**
     * 
     * @type {Login}
     * @memberof DefaultApiLoginPost
     */
    readonly login: Login
}

/**
 * Request parameters for marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest
 */
export interface DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet
     */
    readonly collectionId: string

    /**
     * Document ID
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet
     */
    readonly documentId: string
}

/**
 * Request parameters for marketplaceCollectionsCollectionIdDocumentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest
 */
export interface DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdDocumentsGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for marketplaceCollectionsCollectionIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsCollectionIdGetRequest
 */
export interface DefaultApiMarketplaceCollectionsCollectionIdGetRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for marketplaceCollectionsCollectionIdGraphGet operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest
 */
export interface DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdGraphGet
     */
    readonly collectionId: string

    /**
     * Node label filter
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdGraphGet
     */
    readonly label?: string

    /**
     * Maximum number of nodes
     * @type {number}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdGraphGet
     */
    readonly maxNodes?: number

    /**
     * Graph traversal depth
     * @type {number}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdGraphGet
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for marketplaceCollectionsCollectionIdSubscribeDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest
 */
export interface DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdSubscribeDelete
     */
    readonly collectionId: string
}

/**
 * Request parameters for marketplaceCollectionsCollectionIdSubscribePost operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest
 */
export interface DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest {
    /**
     * Collection ID
     * @type {string}
     * @memberof DefaultApiMarketplaceCollectionsCollectionIdSubscribePost
     */
    readonly collectionId: string
}

/**
 * Request parameters for marketplaceCollectionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsGetRequest
 */
export interface DefaultApiMarketplaceCollectionsGetRequest {
    /**
     * Page number
     * @type {number}
     * @memberof DefaultApiMarketplaceCollectionsGet
     */
    readonly page?: number

    /**
     * Page size
     * @type {number}
     * @memberof DefaultApiMarketplaceCollectionsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for marketplaceCollectionsSubscriptionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiMarketplaceCollectionsSubscriptionsGetRequest
 */
export interface DefaultApiMarketplaceCollectionsSubscriptionsGetRequest {
    /**
     * Page number
     * @type {number}
     * @memberof DefaultApiMarketplaceCollectionsSubscriptionsGet
     */
    readonly page?: number

    /**
     * Page size
     * @type {number}
     * @memberof DefaultApiMarketplaceCollectionsSubscriptionsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for registerPost operation in DefaultApi.
 * @export
 * @interface DefaultApiRegisterPostRequest
 */
export interface DefaultApiRegisterPostRequest {
    /**
     * 
     * @type {Register}
     * @memberof DefaultApiRegisterPost
     */
    readonly register: Register
}

/**
 * Request parameters for settingsPut operation in DefaultApi.
 * @export
 * @interface DefaultApiSettingsPutRequest
 */
export interface DefaultApiSettingsPutRequest {
    /**
     * 
     * @type {Settings}
     * @memberof DefaultApiSettingsPut
     */
    readonly settings: Settings
}

/**
 * Request parameters for settingsTestMineruTokenPost operation in DefaultApi.
 * @export
 * @interface DefaultApiSettingsTestMineruTokenPostRequest
 */
export interface DefaultApiSettingsTestMineruTokenPostRequest {
    /**
     * 
     * @type {SettingsTestMineruTokenPostRequest}
     * @memberof DefaultApiSettingsTestMineruTokenPost
     */
    readonly settingsTestMineruTokenPostRequest?: SettingsTestMineruTokenPostRequest
}

/**
 * Request parameters for usersUserIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiUsersUserIdDeleteRequest
 */
export interface DefaultApiUsersUserIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiUsersUserIdDelete
     */
    readonly userId: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * This endpoint is for documentation and model generation only. Actual communication should use WebSocket or SSE. 
     * @summary (Doc Only) Agent message format for WebSocket/SSE
     * @param {DefaultApiAgentMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public agentMessagePost(requestParameters: DefaultApiAgentMessagePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).agentMessagePost(requestParameters.agentMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete API key
     * @summary Delete API key
     * @param {DefaultApiApikeysApikeyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apikeysApikeyIdDelete(requestParameters: DefaultApiApikeysApikeyIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apikeysApikeyIdDelete(requestParameters.apikeyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update API key
     * @summary Update API key
     * @param {DefaultApiApikeysApikeyIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apikeysApikeyIdPut(requestParameters: DefaultApiApikeysApikeyIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apikeysApikeyIdPut(requestParameters.apikeyId, requestParameters.apiKeyUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get API keys
     * @summary Get API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apikeysGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apikeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create API key
     * @summary Create API key
     * @param {DefaultApiApikeysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apikeysPost(requestParameters: DefaultApiApikeysPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apikeysPost(requestParameters.apiKeyCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get available models with tag filtering support. - No tag_filters or empty array: Returns only models with \"recommend\" tag (default) - Specific filters: Returns models matching the filter conditions 
     * @summary Get available models with filtering
     * @param {DefaultApiAvailableModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public availableModelsPost(requestParameters: DefaultApiAvailableModelsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).availableModelsPost(requestParameters.tagFilterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a chat (idempotent operation)
     * @summary Delete a chat
     * @param {DefaultApiBotsBotIdChatsChatIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdChatsChatIdDelete(requestParameters: DefaultApiBotsBotIdChatsChatIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdChatsChatIdDelete(requestParameters.botId, requestParameters.chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific chat
     * @summary Get chat details
     * @param {DefaultApiBotsBotIdChatsChatIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdChatsChatIdGet(requestParameters: DefaultApiBotsBotIdChatsChatIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdChatsChatIdGet(requestParameters.botId, requestParameters.chatId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Feedback a message
     * @summary Feedback a message
     * @param {DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters: DefaultApiBotsBotIdChatsChatIdMessagesMessageIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdChatsChatIdMessagesMessageIdPost(requestParameters.botId, requestParameters.chatId, requestParameters.messageId, requestParameters.feedback, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a chat
     * @summary Update a chat
     * @param {DefaultApiBotsBotIdChatsChatIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdChatsChatIdPut(requestParameters: DefaultApiBotsBotIdChatsChatIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdChatsChatIdPut(requestParameters.botId, requestParameters.chatId, requestParameters.chatUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of chats
     * @summary List chats
     * @param {DefaultApiBotsBotIdChatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdChatsGet(requestParameters: DefaultApiBotsBotIdChatsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdChatsGet(requestParameters.botId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new chat
     * @summary Create a new chat
     * @param {DefaultApiBotsBotIdChatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdChatsPost(requestParameters: DefaultApiBotsBotIdChatsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdChatsPost(requestParameters.botId, requestParameters.chatCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a bot (idempotent operation)
     * @summary Delete a bot
     * @param {DefaultApiBotsBotIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdDelete(requestParameters: DefaultApiBotsBotIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdDelete(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Debug a flow
     * @summary Debug a flow
     * @param {DefaultApiBotsBotIdFlowDebugPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdFlowDebugPost(requestParameters: DefaultApiBotsBotIdFlowDebugPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdFlowDebugPost(requestParameters.botId, requestParameters.debugFlowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get flow
     * @summary Get flow
     * @param {DefaultApiBotsBotIdFlowGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdFlowGet(requestParameters: DefaultApiBotsBotIdFlowGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdFlowGet(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update flow
     * @summary Update flow
     * @param {DefaultApiBotsBotIdFlowPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdFlowPut(requestParameters: DefaultApiBotsBotIdFlowPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdFlowPut(requestParameters.botId, requestParameters.workflowDefinition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific bot
     * @summary Get bot details
     * @param {DefaultApiBotsBotIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdGet(requestParameters: DefaultApiBotsBotIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdGet(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a bot
     * @summary Update a bot
     * @param {DefaultApiBotsBotIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsBotIdPut(requestParameters: DefaultApiBotsBotIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsBotIdPut(requestParameters.botId, requestParameters.botUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of bots
     * @summary List bots
     * @param {DefaultApiBotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsGet(requestParameters: DefaultApiBotsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new bot
     * @summary Create a new bot
     * @param {DefaultApiBotsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsPost(requestParameters: DefaultApiBotsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsPost(requestParameters.botCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change user password
     * @summary Change user password
     * @param {DefaultApiChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changePasswordPost(requestParameters: DefaultApiChangePasswordPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).changePasswordPost(requestParameters.changePassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a collection
     * @summary Delete a collection
     * @param {DefaultApiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdDelete(requestParameters: DefaultApiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdDelete(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a document
     * @summary Delete a document
     * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdDelete(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific document
     * @summary Get document details
     * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdDocumentsDocumentIdGet(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rebuild specified types of indexes for a document
     * @summary Rebuild document indexes
     * @param {DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters: DefaultApiCollectionsCollectionIdDocumentsDocumentIdRebuildIndexesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdDocumentsDocumentIdRebuildIndexesPost(requestParameters.collectionId, requestParameters.documentId, requestParameters.rebuildIndexesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of documents
     * @summary List documents
     * @param {DefaultApiCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdDocumentsGet(requestParameters: DefaultApiCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdDocumentsGet(requestParameters.collectionId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new document
     * @summary Create a new document
     * @param {DefaultApiCollectionsCollectionIdDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdDocumentsPost(requestParameters: DefaultApiCollectionsCollectionIdDocumentsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdDocumentsPost(requestParameters.collectionId, requestParameters.documentCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific collection
     * @summary Get collection details
     * @param {DefaultApiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdGet(requestParameters: DefaultApiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a collection
     * @summary Update a collection
     * @param {DefaultApiCollectionsCollectionIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdPut(requestParameters: DefaultApiCollectionsCollectionIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdPut(requestParameters.collectionId, requestParameters.collectionUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the history of searches
     * @summary Get search history
     * @param {DefaultApiCollectionsCollectionIdSearchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdSearchesGet(requestParameters: DefaultApiCollectionsCollectionIdSearchesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdSearchesGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search in a collection with different search types
     * @summary Search in collection
     * @param {DefaultApiCollectionsCollectionIdSearchesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdSearchesPost(requestParameters: DefaultApiCollectionsCollectionIdSearchesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdSearchesPost(requestParameters.collectionId, requestParameters.searchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a search
     * @summary Delete a search
     * @param {DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdSearchesSearchIdDelete(requestParameters: DefaultApiCollectionsCollectionIdSearchesSearchIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdSearchesSearchIdDelete(requestParameters.collectionId, requestParameters.searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a collection from the public marketplace (owner only)
     * @summary Unpublish collection from marketplace
     * @param {DefaultApiCollectionsCollectionIdSharingDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdSharingDelete(requestParameters: DefaultApiCollectionsCollectionIdSharingDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdSharingDelete(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the sharing status of a collection (owner only)
     * @summary Get collection sharing status
     * @param {DefaultApiCollectionsCollectionIdSharingGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdSharingGet(requestParameters: DefaultApiCollectionsCollectionIdSharingGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdSharingGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a collection to the public marketplace (owner only)
     * @summary Publish collection to marketplace
     * @param {DefaultApiCollectionsCollectionIdSharingPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdSharingPost(requestParameters: DefaultApiCollectionsCollectionIdSharingPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdSharingPost(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger collection summary generation as background task
     * @summary Generate collection summary
     * @param {DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsCollectionIdSummaryGeneratePost(requestParameters: DefaultApiCollectionsCollectionIdSummaryGeneratePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsCollectionIdSummaryGeneratePost(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of collections (owned and optionally subscribed)
     * @summary List collections
     * @param {DefaultApiCollectionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsGet(requestParameters: DefaultApiCollectionsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsGet(requestParameters.page, requestParameters.pageSize, requestParameters.includeSubscribed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new collection
     * @summary Create a new collection
     * @param {DefaultApiCollectionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionsPost(requestParameters: DefaultApiCollectionsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionsPost(requestParameters.collectionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system configuration
     * @summary Get system configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an object from a specific document
     * @summary Get document object
     * @param {DefaultApiGetDocumentObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDocumentObject(requestParameters: DefaultApiGetDocumentObjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDocumentObject(requestParameters.collectionId, requestParameters.documentId, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a preview of a specific document
     * @summary Get document preview
     * @param {DefaultApiGetDocumentPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDocumentPreview(requestParameters: DefaultApiGetDocumentPreviewRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDocumentPreview(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all invitations
     * @summary Get all invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invitationsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invitationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new invitation for a user to register
     * @summary Create an invitation
     * @param {DefaultApiInvitePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invitePost(requestParameters: DefaultApiInvitePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invitePost(requestParameters.invitationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get complete LLM configuration including providers and models
     * @summary Get complete LLM configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmConfigurationGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmConfigurationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all LLM provider models, optionally filtered by provider
     * @summary List all LLM provider models
     * @param {DefaultApiLlmProviderModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProviderModelsGet(requestParameters: DefaultApiLlmProviderModelsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProviderModelsGet(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new LLM provider with optional API key
     * @summary Create a new LLM provider
     * @param {DefaultApiLlmProvidersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersPost(requestParameters: DefaultApiLlmProvidersPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersPost(requestParameters.llmProviderCreateWithApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an LLM provider (soft delete)
     * @summary Delete an LLM provider
     * @param {DefaultApiLlmProvidersProviderNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersProviderNameDelete(requestParameters: DefaultApiLlmProvidersProviderNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersProviderNameDelete(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific LLM provider by name
     * @summary Get a specific LLM provider
     * @param {DefaultApiLlmProvidersProviderNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersProviderNameGet(requestParameters: DefaultApiLlmProvidersProviderNameGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersProviderNameGet(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific model of a provider
     * @summary Delete a provider model
     * @param {DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersProviderNameModelsApiModelDelete(requestParameters: DefaultApiLlmProvidersProviderNameModelsApiModelDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersProviderNameModelsApiModelDelete(requestParameters.providerName, requestParameters.api, requestParameters.model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific model of a provider
     * @summary Update a provider model
     * @param {DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersProviderNameModelsApiModelPut(requestParameters: DefaultApiLlmProvidersProviderNameModelsApiModelPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersProviderNameModelsApiModelPut(requestParameters.providerName, requestParameters.api, requestParameters.model, requestParameters.llmProviderModelUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all models for a specific provider
     * @summary Get models for a specific provider
     * @param {DefaultApiLlmProvidersProviderNameModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersProviderNameModelsGet(requestParameters: DefaultApiLlmProvidersProviderNameModelsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersProviderNameModelsGet(requestParameters.providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new model for a specific provider
     * @summary Create a new model for a provider
     * @param {DefaultApiLlmProvidersProviderNameModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersProviderNameModelsPost(requestParameters: DefaultApiLlmProvidersProviderNameModelsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersProviderNameModelsPost(requestParameters.providerName, requestParameters.llmProviderModelCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing LLM provider with optional API key
     * @summary Update an LLM provider
     * @param {DefaultApiLlmProvidersProviderNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public llmProvidersProviderNamePut(requestParameters: DefaultApiLlmProvidersProviderNamePutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).llmProvidersProviderNamePut(requestParameters.providerName, requestParameters.llmProviderUpdateWithApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login a user with username and password
     * @summary Login a user
     * @param {DefaultApiLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginPost(requestParameters: DefaultApiLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginPost(requestParameters.login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout a user
     * @summary Logout a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get document preview for a subscribed Collection (read-only mode)
     * @summary Preview document in MarketplaceCollection (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsCollectionIdDocumentsDocumentIdPreviewGet(requestParameters.collectionId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get document list for a subscribed Collection (read-only mode)
     * @summary List documents in MarketplaceCollection (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsCollectionIdDocumentsGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdDocumentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsCollectionIdDocumentsGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a subscribed Collection (read-only access)
     * @summary Get MarketplaceCollection details (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsCollectionIdGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get knowledge graph data for a subscribed Collection (read-only mode)
     * @summary Get knowledge graph for MarketplaceCollection (read-only)
     * @param {DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsCollectionIdGraphGet(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdGraphGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsCollectionIdGraphGet(requestParameters.collectionId, requestParameters.label, requestParameters.maxNodes, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove subscription to a Collection
     * @summary Unsubscribe from a Collection
     * @param {DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsCollectionIdSubscribeDelete(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdSubscribeDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsCollectionIdSubscribeDelete(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe to a published Collection
     * @summary Subscribe to a Collection
     * @param {DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsCollectionIdSubscribePost(requestParameters: DefaultApiMarketplaceCollectionsCollectionIdSubscribePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsCollectionIdSubscribePost(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all Collections that are published to marketplace with current user\'s subscription status
     * @summary List all published Collections in marketplace
     * @param {DefaultApiMarketplaceCollectionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsGet(requestParameters: DefaultApiMarketplaceCollectionsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all Collections that current user has subscribed to
     * @summary Get user\'s subscribed Collections
     * @param {DefaultApiMarketplaceCollectionsSubscriptionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public marketplaceCollectionsSubscriptionsGet(requestParameters: DefaultApiMarketplaceCollectionsSubscriptionsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).marketplaceCollectionsSubscriptionsGet(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get prompt templates
     * @summary Get prompt templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public promptTemplatesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).promptTemplatesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new user with an invitation token
     * @summary Register a new user
     * @param {DefaultApiRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerPost(requestParameters: DefaultApiRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerPost(requestParameters.register, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all application settings
     * @summary Get all settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public settingsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).settingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update one or more application settings
     * @summary Update settings
     * @param {DefaultApiSettingsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public settingsPut(requestParameters: DefaultApiSettingsPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).settingsPut(requestParameters.settings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test the connectivity of the MinerU API Token
     * @summary Test MinerU API Token
     * @param {DefaultApiSettingsTestMineruTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public settingsTestMineruTokenPost(requestParameters: DefaultApiSettingsTestMineruTokenPostRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).settingsTestMineruTokenPost(requestParameters.settingsTestMineruTokenPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user info
     * @summary Get user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user
     * @summary Delete a user
     * @param {DefaultApiUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdDelete(requestParameters: DefaultApiUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersUserIdDelete(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const LlmProvidersProviderNameModelsApiModelDeleteApiEnum = {
    completion: 'completion',
    embedding: 'embedding',
    rerank: 'rerank'
} as const;
export type LlmProvidersProviderNameModelsApiModelDeleteApiEnum = typeof LlmProvidersProviderNameModelsApiModelDeleteApiEnum[keyof typeof LlmProvidersProviderNameModelsApiModelDeleteApiEnum];
/**
 * @export
 */
export const LlmProvidersProviderNameModelsApiModelPutApiEnum = {
    completion: 'completion',
    embedding: 'embedding',
    rerank: 'rerank'
} as const;
export type LlmProvidersProviderNameModelsApiModelPutApiEnum = typeof LlmProvidersProviderNameModelsApiModelPutApiEnum[keyof typeof LlmProvidersProviderNameModelsApiModelPutApiEnum];
